// soc_system_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_2 (
		input  wire [11:0]  hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire         hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire         hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0]  hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]   hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire         hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire         hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire         hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0]  hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]   hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire         hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire         hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire         hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire         hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0]  hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0]  hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]   hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire         hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire         hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire         hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire         clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire         pll_0_outclk0_clk,                                                   //                                                 pll_0_outclk0.clk
		input  wire         hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         render_dma_reset_n_reset_bridge_in_reset_reset,                      //                      render_dma_reset_n_reset_bridge_in_reset.reset
		input  wire         sysinfo_reg_0_reset_reset_bridge_in_reset_reset,                     //                     sysinfo_reg_0_reset_reset_bridge_in_reset.reset
		output wire [7:0]   avalon_slave_edid_0_s0_address,                                      //                                        avalon_slave_edid_0_s0.address
		output wire         avalon_slave_edid_0_s0_write,                                        //                                                              .write
		output wire         avalon_slave_edid_0_s0_read,                                         //                                                              .read
		input  wire [7:0]   avalon_slave_edid_0_s0_readdata,                                     //                                                              .readdata
		output wire [7:0]   avalon_slave_edid_0_s0_writedata,                                    //                                                              .writedata
		output wire [1:0]   button_pio_s1_address,                                               //                                                 button_pio_s1.address
		output wire         button_pio_s1_write,                                                 //                                                              .write
		input  wire [31:0]  button_pio_s1_readdata,                                              //                                                              .readdata
		output wire [31:0]  button_pio_s1_writedata,                                             //                                                              .writedata
		output wire         button_pio_s1_chipselect,                                            //                                                              .chipselect
		output wire [1:0]   dipsw_pio_s1_address,                                                //                                                  dipsw_pio_s1.address
		output wire         dipsw_pio_s1_write,                                                  //                                                              .write
		input  wire [31:0]  dipsw_pio_s1_readdata,                                               //                                                              .readdata
		output wire [31:0]  dipsw_pio_s1_writedata,                                              //                                                              .writedata
		output wire         dipsw_pio_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]   led_pio_s1_address,                                                  //                                                    led_pio_s1.address
		output wire         led_pio_s1_write,                                                    //                                                              .write
		input  wire [31:0]  led_pio_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0]  led_pio_s1_writedata,                                                //                                                              .writedata
		output wire         led_pio_s1_chipselect,                                               //                                                              .chipselect
		output wire [2:0]   overlay_dma_csr_address,                                             //                                               overlay_dma_csr.address
		output wire         overlay_dma_csr_write,                                               //                                                              .write
		output wire         overlay_dma_csr_read,                                                //                                                              .read
		input  wire [31:0]  overlay_dma_csr_readdata,                                            //                                                              .readdata
		output wire [31:0]  overlay_dma_csr_writedata,                                           //                                                              .writedata
		output wire [3:0]   overlay_dma_csr_byteenable,                                          //                                                              .byteenable
		output wire         overlay_dma_descriptor_slave_write,                                  //                                  overlay_dma_descriptor_slave.write
		output wire [127:0] overlay_dma_descriptor_slave_writedata,                              //                                                              .writedata
		output wire [15:0]  overlay_dma_descriptor_slave_byteenable,                             //                                                              .byteenable
		input  wire         overlay_dma_descriptor_slave_waitrequest,                            //                                                              .waitrequest
		output wire [2:0]   render_dma_csr_address,                                              //                                                render_dma_csr.address
		output wire         render_dma_csr_write,                                                //                                                              .write
		output wire         render_dma_csr_read,                                                 //                                                              .read
		input  wire [31:0]  render_dma_csr_readdata,                                             //                                                              .readdata
		output wire [31:0]  render_dma_csr_writedata,                                            //                                                              .writedata
		output wire [3:0]   render_dma_csr_byteenable,                                           //                                                              .byteenable
		output wire         render_dma_descriptor_slave_write,                                   //                                   render_dma_descriptor_slave.write
		output wire [127:0] render_dma_descriptor_slave_writedata,                               //                                                              .writedata
		output wire [15:0]  render_dma_descriptor_slave_byteenable,                              //                                                              .byteenable
		input  wire         render_dma_descriptor_slave_waitrequest,                             //                                                              .waitrequest
		output wire [0:0]   sysid_qsys_control_slave_address,                                    //                                      sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata,                                   //                                                              .readdata
		output wire [7:0]   sysinfo_reg_0_avs_s0_address,                                        //                                          sysinfo_reg_0_avs_s0.address
		output wire         sysinfo_reg_0_avs_s0_write,                                          //                                                              .write
		output wire         sysinfo_reg_0_avs_s0_read,                                           //                                                              .read
		input  wire [31:0]  sysinfo_reg_0_avs_s0_readdata,                                       //                                                              .readdata
		output wire [31:0]  sysinfo_reg_0_avs_s0_writedata,                                      //                                                              .writedata
		input  wire         sysinfo_reg_0_avs_s0_waitrequest                                     //                                                              .waitrequest
	);

	wire   [31:0] sysinfo_reg_0_avs_s0_agent_m0_readdata;                           // sysinfo_reg_0_avs_s0_translator:uav_readdata -> sysinfo_reg_0_avs_s0_agent:m0_readdata
	wire          sysinfo_reg_0_avs_s0_agent_m0_waitrequest;                        // sysinfo_reg_0_avs_s0_translator:uav_waitrequest -> sysinfo_reg_0_avs_s0_agent:m0_waitrequest
	wire          sysinfo_reg_0_avs_s0_agent_m0_debugaccess;                        // sysinfo_reg_0_avs_s0_agent:m0_debugaccess -> sysinfo_reg_0_avs_s0_translator:uav_debugaccess
	wire   [20:0] sysinfo_reg_0_avs_s0_agent_m0_address;                            // sysinfo_reg_0_avs_s0_agent:m0_address -> sysinfo_reg_0_avs_s0_translator:uav_address
	wire    [3:0] sysinfo_reg_0_avs_s0_agent_m0_byteenable;                         // sysinfo_reg_0_avs_s0_agent:m0_byteenable -> sysinfo_reg_0_avs_s0_translator:uav_byteenable
	wire          sysinfo_reg_0_avs_s0_agent_m0_read;                               // sysinfo_reg_0_avs_s0_agent:m0_read -> sysinfo_reg_0_avs_s0_translator:uav_read
	wire          sysinfo_reg_0_avs_s0_agent_m0_readdatavalid;                      // sysinfo_reg_0_avs_s0_translator:uav_readdatavalid -> sysinfo_reg_0_avs_s0_agent:m0_readdatavalid
	wire          sysinfo_reg_0_avs_s0_agent_m0_lock;                               // sysinfo_reg_0_avs_s0_agent:m0_lock -> sysinfo_reg_0_avs_s0_translator:uav_lock
	wire   [31:0] sysinfo_reg_0_avs_s0_agent_m0_writedata;                          // sysinfo_reg_0_avs_s0_agent:m0_writedata -> sysinfo_reg_0_avs_s0_translator:uav_writedata
	wire          sysinfo_reg_0_avs_s0_agent_m0_write;                              // sysinfo_reg_0_avs_s0_agent:m0_write -> sysinfo_reg_0_avs_s0_translator:uav_write
	wire    [2:0] sysinfo_reg_0_avs_s0_agent_m0_burstcount;                         // sysinfo_reg_0_avs_s0_agent:m0_burstcount -> sysinfo_reg_0_avs_s0_translator:uav_burstcount
	wire          sysinfo_reg_0_avs_s0_agent_rf_source_valid;                       // sysinfo_reg_0_avs_s0_agent:rf_source_valid -> sysinfo_reg_0_avs_s0_agent_rsp_fifo:in_valid
	wire  [120:0] sysinfo_reg_0_avs_s0_agent_rf_source_data;                        // sysinfo_reg_0_avs_s0_agent:rf_source_data -> sysinfo_reg_0_avs_s0_agent_rsp_fifo:in_data
	wire          sysinfo_reg_0_avs_s0_agent_rf_source_ready;                       // sysinfo_reg_0_avs_s0_agent_rsp_fifo:in_ready -> sysinfo_reg_0_avs_s0_agent:rf_source_ready
	wire          sysinfo_reg_0_avs_s0_agent_rf_source_startofpacket;               // sysinfo_reg_0_avs_s0_agent:rf_source_startofpacket -> sysinfo_reg_0_avs_s0_agent_rsp_fifo:in_startofpacket
	wire          sysinfo_reg_0_avs_s0_agent_rf_source_endofpacket;                 // sysinfo_reg_0_avs_s0_agent:rf_source_endofpacket -> sysinfo_reg_0_avs_s0_agent_rsp_fifo:in_endofpacket
	wire          sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_valid;                    // sysinfo_reg_0_avs_s0_agent_rsp_fifo:out_valid -> sysinfo_reg_0_avs_s0_agent:rf_sink_valid
	wire  [120:0] sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_data;                     // sysinfo_reg_0_avs_s0_agent_rsp_fifo:out_data -> sysinfo_reg_0_avs_s0_agent:rf_sink_data
	wire          sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_ready;                    // sysinfo_reg_0_avs_s0_agent:rf_sink_ready -> sysinfo_reg_0_avs_s0_agent_rsp_fifo:out_ready
	wire          sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_startofpacket;            // sysinfo_reg_0_avs_s0_agent_rsp_fifo:out_startofpacket -> sysinfo_reg_0_avs_s0_agent:rf_sink_startofpacket
	wire          sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_endofpacket;              // sysinfo_reg_0_avs_s0_agent_rsp_fifo:out_endofpacket -> sysinfo_reg_0_avs_s0_agent:rf_sink_endofpacket
	wire          sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_valid;                  // sysinfo_reg_0_avs_s0_agent:rdata_fifo_src_valid -> sysinfo_reg_0_avs_s0_agent_rdata_fifo:in_valid
	wire   [33:0] sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_data;                   // sysinfo_reg_0_avs_s0_agent:rdata_fifo_src_data -> sysinfo_reg_0_avs_s0_agent_rdata_fifo:in_data
	wire          sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_ready;                  // sysinfo_reg_0_avs_s0_agent_rdata_fifo:in_ready -> sysinfo_reg_0_avs_s0_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                       // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                    // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                    // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [20:0] sysid_qsys_control_slave_agent_m0_address;                        // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                     // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                           // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                  // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                           // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                      // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                          // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                     // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                   // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [120:0] sysid_qsys_control_slave_agent_rf_source_data;                    // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                   // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;           // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;             // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [120:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                 // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;        // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;          // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;              // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;               // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;              // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] overlay_dma_csr_agent_m0_readdata;                                // overlay_dma_csr_translator:uav_readdata -> overlay_dma_csr_agent:m0_readdata
	wire          overlay_dma_csr_agent_m0_waitrequest;                             // overlay_dma_csr_translator:uav_waitrequest -> overlay_dma_csr_agent:m0_waitrequest
	wire          overlay_dma_csr_agent_m0_debugaccess;                             // overlay_dma_csr_agent:m0_debugaccess -> overlay_dma_csr_translator:uav_debugaccess
	wire   [20:0] overlay_dma_csr_agent_m0_address;                                 // overlay_dma_csr_agent:m0_address -> overlay_dma_csr_translator:uav_address
	wire    [3:0] overlay_dma_csr_agent_m0_byteenable;                              // overlay_dma_csr_agent:m0_byteenable -> overlay_dma_csr_translator:uav_byteenable
	wire          overlay_dma_csr_agent_m0_read;                                    // overlay_dma_csr_agent:m0_read -> overlay_dma_csr_translator:uav_read
	wire          overlay_dma_csr_agent_m0_readdatavalid;                           // overlay_dma_csr_translator:uav_readdatavalid -> overlay_dma_csr_agent:m0_readdatavalid
	wire          overlay_dma_csr_agent_m0_lock;                                    // overlay_dma_csr_agent:m0_lock -> overlay_dma_csr_translator:uav_lock
	wire   [31:0] overlay_dma_csr_agent_m0_writedata;                               // overlay_dma_csr_agent:m0_writedata -> overlay_dma_csr_translator:uav_writedata
	wire          overlay_dma_csr_agent_m0_write;                                   // overlay_dma_csr_agent:m0_write -> overlay_dma_csr_translator:uav_write
	wire    [2:0] overlay_dma_csr_agent_m0_burstcount;                              // overlay_dma_csr_agent:m0_burstcount -> overlay_dma_csr_translator:uav_burstcount
	wire          overlay_dma_csr_agent_rf_source_valid;                            // overlay_dma_csr_agent:rf_source_valid -> overlay_dma_csr_agent_rsp_fifo:in_valid
	wire  [120:0] overlay_dma_csr_agent_rf_source_data;                             // overlay_dma_csr_agent:rf_source_data -> overlay_dma_csr_agent_rsp_fifo:in_data
	wire          overlay_dma_csr_agent_rf_source_ready;                            // overlay_dma_csr_agent_rsp_fifo:in_ready -> overlay_dma_csr_agent:rf_source_ready
	wire          overlay_dma_csr_agent_rf_source_startofpacket;                    // overlay_dma_csr_agent:rf_source_startofpacket -> overlay_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          overlay_dma_csr_agent_rf_source_endofpacket;                      // overlay_dma_csr_agent:rf_source_endofpacket -> overlay_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          overlay_dma_csr_agent_rsp_fifo_out_valid;                         // overlay_dma_csr_agent_rsp_fifo:out_valid -> overlay_dma_csr_agent:rf_sink_valid
	wire  [120:0] overlay_dma_csr_agent_rsp_fifo_out_data;                          // overlay_dma_csr_agent_rsp_fifo:out_data -> overlay_dma_csr_agent:rf_sink_data
	wire          overlay_dma_csr_agent_rsp_fifo_out_ready;                         // overlay_dma_csr_agent:rf_sink_ready -> overlay_dma_csr_agent_rsp_fifo:out_ready
	wire          overlay_dma_csr_agent_rsp_fifo_out_startofpacket;                 // overlay_dma_csr_agent_rsp_fifo:out_startofpacket -> overlay_dma_csr_agent:rf_sink_startofpacket
	wire          overlay_dma_csr_agent_rsp_fifo_out_endofpacket;                   // overlay_dma_csr_agent_rsp_fifo:out_endofpacket -> overlay_dma_csr_agent:rf_sink_endofpacket
	wire          overlay_dma_csr_agent_rdata_fifo_src_valid;                       // overlay_dma_csr_agent:rdata_fifo_src_valid -> overlay_dma_csr_agent_rdata_fifo:in_valid
	wire   [33:0] overlay_dma_csr_agent_rdata_fifo_src_data;                        // overlay_dma_csr_agent:rdata_fifo_src_data -> overlay_dma_csr_agent_rdata_fifo:in_data
	wire          overlay_dma_csr_agent_rdata_fifo_src_ready;                       // overlay_dma_csr_agent_rdata_fifo:in_ready -> overlay_dma_csr_agent:rdata_fifo_src_ready
	wire   [31:0] render_dma_csr_agent_m0_readdata;                                 // render_dma_csr_translator:uav_readdata -> render_dma_csr_agent:m0_readdata
	wire          render_dma_csr_agent_m0_waitrequest;                              // render_dma_csr_translator:uav_waitrequest -> render_dma_csr_agent:m0_waitrequest
	wire          render_dma_csr_agent_m0_debugaccess;                              // render_dma_csr_agent:m0_debugaccess -> render_dma_csr_translator:uav_debugaccess
	wire   [20:0] render_dma_csr_agent_m0_address;                                  // render_dma_csr_agent:m0_address -> render_dma_csr_translator:uav_address
	wire    [3:0] render_dma_csr_agent_m0_byteenable;                               // render_dma_csr_agent:m0_byteenable -> render_dma_csr_translator:uav_byteenable
	wire          render_dma_csr_agent_m0_read;                                     // render_dma_csr_agent:m0_read -> render_dma_csr_translator:uav_read
	wire          render_dma_csr_agent_m0_readdatavalid;                            // render_dma_csr_translator:uav_readdatavalid -> render_dma_csr_agent:m0_readdatavalid
	wire          render_dma_csr_agent_m0_lock;                                     // render_dma_csr_agent:m0_lock -> render_dma_csr_translator:uav_lock
	wire   [31:0] render_dma_csr_agent_m0_writedata;                                // render_dma_csr_agent:m0_writedata -> render_dma_csr_translator:uav_writedata
	wire          render_dma_csr_agent_m0_write;                                    // render_dma_csr_agent:m0_write -> render_dma_csr_translator:uav_write
	wire    [2:0] render_dma_csr_agent_m0_burstcount;                               // render_dma_csr_agent:m0_burstcount -> render_dma_csr_translator:uav_burstcount
	wire          render_dma_csr_agent_rf_source_valid;                             // render_dma_csr_agent:rf_source_valid -> render_dma_csr_agent_rsp_fifo:in_valid
	wire  [120:0] render_dma_csr_agent_rf_source_data;                              // render_dma_csr_agent:rf_source_data -> render_dma_csr_agent_rsp_fifo:in_data
	wire          render_dma_csr_agent_rf_source_ready;                             // render_dma_csr_agent_rsp_fifo:in_ready -> render_dma_csr_agent:rf_source_ready
	wire          render_dma_csr_agent_rf_source_startofpacket;                     // render_dma_csr_agent:rf_source_startofpacket -> render_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          render_dma_csr_agent_rf_source_endofpacket;                       // render_dma_csr_agent:rf_source_endofpacket -> render_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          render_dma_csr_agent_rsp_fifo_out_valid;                          // render_dma_csr_agent_rsp_fifo:out_valid -> render_dma_csr_agent:rf_sink_valid
	wire  [120:0] render_dma_csr_agent_rsp_fifo_out_data;                           // render_dma_csr_agent_rsp_fifo:out_data -> render_dma_csr_agent:rf_sink_data
	wire          render_dma_csr_agent_rsp_fifo_out_ready;                          // render_dma_csr_agent:rf_sink_ready -> render_dma_csr_agent_rsp_fifo:out_ready
	wire          render_dma_csr_agent_rsp_fifo_out_startofpacket;                  // render_dma_csr_agent_rsp_fifo:out_startofpacket -> render_dma_csr_agent:rf_sink_startofpacket
	wire          render_dma_csr_agent_rsp_fifo_out_endofpacket;                    // render_dma_csr_agent_rsp_fifo:out_endofpacket -> render_dma_csr_agent:rf_sink_endofpacket
	wire          render_dma_csr_agent_rdata_fifo_src_valid;                        // render_dma_csr_agent:rdata_fifo_src_valid -> render_dma_csr_agent_rdata_fifo:in_valid
	wire   [33:0] render_dma_csr_agent_rdata_fifo_src_data;                         // render_dma_csr_agent:rdata_fifo_src_data -> render_dma_csr_agent_rdata_fifo:in_data
	wire          render_dma_csr_agent_rdata_fifo_src_ready;                        // render_dma_csr_agent_rdata_fifo:in_ready -> render_dma_csr_agent:rdata_fifo_src_ready
	wire  [127:0] overlay_dma_descriptor_slave_agent_m0_readdata;                   // overlay_dma_descriptor_slave_translator:uav_readdata -> overlay_dma_descriptor_slave_agent:m0_readdata
	wire          overlay_dma_descriptor_slave_agent_m0_waitrequest;                // overlay_dma_descriptor_slave_translator:uav_waitrequest -> overlay_dma_descriptor_slave_agent:m0_waitrequest
	wire          overlay_dma_descriptor_slave_agent_m0_debugaccess;                // overlay_dma_descriptor_slave_agent:m0_debugaccess -> overlay_dma_descriptor_slave_translator:uav_debugaccess
	wire   [20:0] overlay_dma_descriptor_slave_agent_m0_address;                    // overlay_dma_descriptor_slave_agent:m0_address -> overlay_dma_descriptor_slave_translator:uav_address
	wire   [15:0] overlay_dma_descriptor_slave_agent_m0_byteenable;                 // overlay_dma_descriptor_slave_agent:m0_byteenable -> overlay_dma_descriptor_slave_translator:uav_byteenable
	wire          overlay_dma_descriptor_slave_agent_m0_read;                       // overlay_dma_descriptor_slave_agent:m0_read -> overlay_dma_descriptor_slave_translator:uav_read
	wire          overlay_dma_descriptor_slave_agent_m0_readdatavalid;              // overlay_dma_descriptor_slave_translator:uav_readdatavalid -> overlay_dma_descriptor_slave_agent:m0_readdatavalid
	wire          overlay_dma_descriptor_slave_agent_m0_lock;                       // overlay_dma_descriptor_slave_agent:m0_lock -> overlay_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] overlay_dma_descriptor_slave_agent_m0_writedata;                  // overlay_dma_descriptor_slave_agent:m0_writedata -> overlay_dma_descriptor_slave_translator:uav_writedata
	wire          overlay_dma_descriptor_slave_agent_m0_write;                      // overlay_dma_descriptor_slave_agent:m0_write -> overlay_dma_descriptor_slave_translator:uav_write
	wire    [4:0] overlay_dma_descriptor_slave_agent_m0_burstcount;                 // overlay_dma_descriptor_slave_agent:m0_burstcount -> overlay_dma_descriptor_slave_translator:uav_burstcount
	wire          overlay_dma_descriptor_slave_agent_rf_source_valid;               // overlay_dma_descriptor_slave_agent:rf_source_valid -> overlay_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [228:0] overlay_dma_descriptor_slave_agent_rf_source_data;                // overlay_dma_descriptor_slave_agent:rf_source_data -> overlay_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          overlay_dma_descriptor_slave_agent_rf_source_ready;               // overlay_dma_descriptor_slave_agent_rsp_fifo:in_ready -> overlay_dma_descriptor_slave_agent:rf_source_ready
	wire          overlay_dma_descriptor_slave_agent_rf_source_startofpacket;       // overlay_dma_descriptor_slave_agent:rf_source_startofpacket -> overlay_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          overlay_dma_descriptor_slave_agent_rf_source_endofpacket;         // overlay_dma_descriptor_slave_agent:rf_source_endofpacket -> overlay_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          overlay_dma_descriptor_slave_agent_rsp_fifo_out_valid;            // overlay_dma_descriptor_slave_agent_rsp_fifo:out_valid -> overlay_dma_descriptor_slave_agent:rf_sink_valid
	wire  [228:0] overlay_dma_descriptor_slave_agent_rsp_fifo_out_data;             // overlay_dma_descriptor_slave_agent_rsp_fifo:out_data -> overlay_dma_descriptor_slave_agent:rf_sink_data
	wire          overlay_dma_descriptor_slave_agent_rsp_fifo_out_ready;            // overlay_dma_descriptor_slave_agent:rf_sink_ready -> overlay_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          overlay_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // overlay_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> overlay_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          overlay_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // overlay_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> overlay_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          overlay_dma_descriptor_slave_agent_rdata_fifo_src_valid;          // overlay_dma_descriptor_slave_agent:rdata_fifo_src_valid -> overlay_dma_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] overlay_dma_descriptor_slave_agent_rdata_fifo_src_data;           // overlay_dma_descriptor_slave_agent:rdata_fifo_src_data -> overlay_dma_descriptor_slave_agent_rdata_fifo:in_data
	wire          overlay_dma_descriptor_slave_agent_rdata_fifo_src_ready;          // overlay_dma_descriptor_slave_agent_rdata_fifo:in_ready -> overlay_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] render_dma_descriptor_slave_agent_m0_readdata;                    // render_dma_descriptor_slave_translator:uav_readdata -> render_dma_descriptor_slave_agent:m0_readdata
	wire          render_dma_descriptor_slave_agent_m0_waitrequest;                 // render_dma_descriptor_slave_translator:uav_waitrequest -> render_dma_descriptor_slave_agent:m0_waitrequest
	wire          render_dma_descriptor_slave_agent_m0_debugaccess;                 // render_dma_descriptor_slave_agent:m0_debugaccess -> render_dma_descriptor_slave_translator:uav_debugaccess
	wire   [20:0] render_dma_descriptor_slave_agent_m0_address;                     // render_dma_descriptor_slave_agent:m0_address -> render_dma_descriptor_slave_translator:uav_address
	wire   [15:0] render_dma_descriptor_slave_agent_m0_byteenable;                  // render_dma_descriptor_slave_agent:m0_byteenable -> render_dma_descriptor_slave_translator:uav_byteenable
	wire          render_dma_descriptor_slave_agent_m0_read;                        // render_dma_descriptor_slave_agent:m0_read -> render_dma_descriptor_slave_translator:uav_read
	wire          render_dma_descriptor_slave_agent_m0_readdatavalid;               // render_dma_descriptor_slave_translator:uav_readdatavalid -> render_dma_descriptor_slave_agent:m0_readdatavalid
	wire          render_dma_descriptor_slave_agent_m0_lock;                        // render_dma_descriptor_slave_agent:m0_lock -> render_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] render_dma_descriptor_slave_agent_m0_writedata;                   // render_dma_descriptor_slave_agent:m0_writedata -> render_dma_descriptor_slave_translator:uav_writedata
	wire          render_dma_descriptor_slave_agent_m0_write;                       // render_dma_descriptor_slave_agent:m0_write -> render_dma_descriptor_slave_translator:uav_write
	wire    [4:0] render_dma_descriptor_slave_agent_m0_burstcount;                  // render_dma_descriptor_slave_agent:m0_burstcount -> render_dma_descriptor_slave_translator:uav_burstcount
	wire          render_dma_descriptor_slave_agent_rf_source_valid;                // render_dma_descriptor_slave_agent:rf_source_valid -> render_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [228:0] render_dma_descriptor_slave_agent_rf_source_data;                 // render_dma_descriptor_slave_agent:rf_source_data -> render_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          render_dma_descriptor_slave_agent_rf_source_ready;                // render_dma_descriptor_slave_agent_rsp_fifo:in_ready -> render_dma_descriptor_slave_agent:rf_source_ready
	wire          render_dma_descriptor_slave_agent_rf_source_startofpacket;        // render_dma_descriptor_slave_agent:rf_source_startofpacket -> render_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          render_dma_descriptor_slave_agent_rf_source_endofpacket;          // render_dma_descriptor_slave_agent:rf_source_endofpacket -> render_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          render_dma_descriptor_slave_agent_rsp_fifo_out_valid;             // render_dma_descriptor_slave_agent_rsp_fifo:out_valid -> render_dma_descriptor_slave_agent:rf_sink_valid
	wire  [228:0] render_dma_descriptor_slave_agent_rsp_fifo_out_data;              // render_dma_descriptor_slave_agent_rsp_fifo:out_data -> render_dma_descriptor_slave_agent:rf_sink_data
	wire          render_dma_descriptor_slave_agent_rsp_fifo_out_ready;             // render_dma_descriptor_slave_agent:rf_sink_ready -> render_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          render_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;     // render_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> render_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          render_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;       // render_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> render_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          render_dma_descriptor_slave_agent_rdata_fifo_src_valid;           // render_dma_descriptor_slave_agent:rdata_fifo_src_valid -> render_dma_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] render_dma_descriptor_slave_agent_rdata_fifo_src_data;            // render_dma_descriptor_slave_agent:rdata_fifo_src_data -> render_dma_descriptor_slave_agent_rdata_fifo:in_data
	wire          render_dma_descriptor_slave_agent_rdata_fifo_src_ready;           // render_dma_descriptor_slave_agent_rdata_fifo:in_ready -> render_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire    [7:0] avalon_slave_edid_0_s0_agent_m0_readdata;                         // avalon_slave_edid_0_s0_translator:uav_readdata -> avalon_slave_edid_0_s0_agent:m0_readdata
	wire          avalon_slave_edid_0_s0_agent_m0_waitrequest;                      // avalon_slave_edid_0_s0_translator:uav_waitrequest -> avalon_slave_edid_0_s0_agent:m0_waitrequest
	wire          avalon_slave_edid_0_s0_agent_m0_debugaccess;                      // avalon_slave_edid_0_s0_agent:m0_debugaccess -> avalon_slave_edid_0_s0_translator:uav_debugaccess
	wire   [20:0] avalon_slave_edid_0_s0_agent_m0_address;                          // avalon_slave_edid_0_s0_agent:m0_address -> avalon_slave_edid_0_s0_translator:uav_address
	wire    [0:0] avalon_slave_edid_0_s0_agent_m0_byteenable;                       // avalon_slave_edid_0_s0_agent:m0_byteenable -> avalon_slave_edid_0_s0_translator:uav_byteenable
	wire          avalon_slave_edid_0_s0_agent_m0_read;                             // avalon_slave_edid_0_s0_agent:m0_read -> avalon_slave_edid_0_s0_translator:uav_read
	wire          avalon_slave_edid_0_s0_agent_m0_readdatavalid;                    // avalon_slave_edid_0_s0_translator:uav_readdatavalid -> avalon_slave_edid_0_s0_agent:m0_readdatavalid
	wire          avalon_slave_edid_0_s0_agent_m0_lock;                             // avalon_slave_edid_0_s0_agent:m0_lock -> avalon_slave_edid_0_s0_translator:uav_lock
	wire    [7:0] avalon_slave_edid_0_s0_agent_m0_writedata;                        // avalon_slave_edid_0_s0_agent:m0_writedata -> avalon_slave_edid_0_s0_translator:uav_writedata
	wire          avalon_slave_edid_0_s0_agent_m0_write;                            // avalon_slave_edid_0_s0_agent:m0_write -> avalon_slave_edid_0_s0_translator:uav_write
	wire    [0:0] avalon_slave_edid_0_s0_agent_m0_burstcount;                       // avalon_slave_edid_0_s0_agent:m0_burstcount -> avalon_slave_edid_0_s0_translator:uav_burstcount
	wire          avalon_slave_edid_0_s0_agent_rf_source_valid;                     // avalon_slave_edid_0_s0_agent:rf_source_valid -> avalon_slave_edid_0_s0_agent_rsp_fifo:in_valid
	wire   [93:0] avalon_slave_edid_0_s0_agent_rf_source_data;                      // avalon_slave_edid_0_s0_agent:rf_source_data -> avalon_slave_edid_0_s0_agent_rsp_fifo:in_data
	wire          avalon_slave_edid_0_s0_agent_rf_source_ready;                     // avalon_slave_edid_0_s0_agent_rsp_fifo:in_ready -> avalon_slave_edid_0_s0_agent:rf_source_ready
	wire          avalon_slave_edid_0_s0_agent_rf_source_startofpacket;             // avalon_slave_edid_0_s0_agent:rf_source_startofpacket -> avalon_slave_edid_0_s0_agent_rsp_fifo:in_startofpacket
	wire          avalon_slave_edid_0_s0_agent_rf_source_endofpacket;               // avalon_slave_edid_0_s0_agent:rf_source_endofpacket -> avalon_slave_edid_0_s0_agent_rsp_fifo:in_endofpacket
	wire          avalon_slave_edid_0_s0_agent_rsp_fifo_out_valid;                  // avalon_slave_edid_0_s0_agent_rsp_fifo:out_valid -> avalon_slave_edid_0_s0_agent:rf_sink_valid
	wire   [93:0] avalon_slave_edid_0_s0_agent_rsp_fifo_out_data;                   // avalon_slave_edid_0_s0_agent_rsp_fifo:out_data -> avalon_slave_edid_0_s0_agent:rf_sink_data
	wire          avalon_slave_edid_0_s0_agent_rsp_fifo_out_ready;                  // avalon_slave_edid_0_s0_agent:rf_sink_ready -> avalon_slave_edid_0_s0_agent_rsp_fifo:out_ready
	wire          avalon_slave_edid_0_s0_agent_rsp_fifo_out_startofpacket;          // avalon_slave_edid_0_s0_agent_rsp_fifo:out_startofpacket -> avalon_slave_edid_0_s0_agent:rf_sink_startofpacket
	wire          avalon_slave_edid_0_s0_agent_rsp_fifo_out_endofpacket;            // avalon_slave_edid_0_s0_agent_rsp_fifo:out_endofpacket -> avalon_slave_edid_0_s0_agent:rf_sink_endofpacket
	wire          avalon_slave_edid_0_s0_agent_rdata_fifo_src_valid;                // avalon_slave_edid_0_s0_agent:rdata_fifo_src_valid -> avalon_slave_edid_0_s0_agent_rdata_fifo:in_valid
	wire    [9:0] avalon_slave_edid_0_s0_agent_rdata_fifo_src_data;                 // avalon_slave_edid_0_s0_agent:rdata_fifo_src_data -> avalon_slave_edid_0_s0_agent_rdata_fifo:in_data
	wire          avalon_slave_edid_0_s0_agent_rdata_fifo_src_ready;                // avalon_slave_edid_0_s0_agent_rdata_fifo:in_ready -> avalon_slave_edid_0_s0_agent:rdata_fifo_src_ready
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                     // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                  // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                  // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [20:0] led_pio_s1_agent_m0_address;                                      // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                   // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                         // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                                // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                         // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                    // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                        // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                   // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                                 // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [120:0] led_pio_s1_agent_rf_source_data;                                  // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                                 // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                         // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                           // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                              // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [120:0] led_pio_s1_agent_rsp_fifo_out_data;                               // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                              // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                      // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                        // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                            // led_pio_s1_agent:rdata_fifo_src_valid -> led_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                             // led_pio_s1_agent:rdata_fifo_src_data -> led_pio_s1_agent_rdata_fifo:in_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                            // led_pio_s1_agent_rdata_fifo:in_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                   // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_waitrequest;                                // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire          dipsw_pio_s1_agent_m0_debugaccess;                                // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [20:0] dipsw_pio_s1_agent_m0_address;                                    // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                                 // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_m0_read;                                       // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                              // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_lock;                                       // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                  // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire          dipsw_pio_s1_agent_m0_write;                                      // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                                 // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire          dipsw_pio_s1_agent_rf_source_valid;                               // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [120:0] dipsw_pio_s1_agent_rf_source_data;                                // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                               // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                       // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                         // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                            // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [120:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                             // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                            // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                    // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                      // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                          // dipsw_pio_s1_agent:rdata_fifo_src_valid -> dipsw_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                           // dipsw_pio_s1_agent:rdata_fifo_src_data -> dipsw_pio_s1_agent_rdata_fifo:in_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                          // dipsw_pio_s1_agent_rdata_fifo:in_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                  // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                               // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                               // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [20:0] button_pio_s1_agent_m0_address;                                   // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                      // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                             // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                      // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                 // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                     // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                              // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [120:0] button_pio_s1_agent_rf_source_data;                               // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                              // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                      // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                        // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                           // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [120:0] button_pio_s1_agent_rsp_fifo_out_data;                            // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                           // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                   // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                     // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                         // button_pio_s1_agent:rdata_fifo_src_valid -> button_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                          // button_pio_s1_agent:rdata_fifo_src_data -> button_pio_s1_agent_rdata_fifo:in_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                         // button_pio_s1_agent_rdata_fifo:in_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                     // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                      // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                     // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;             // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;               // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                      // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                       // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                      // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;              // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          sysinfo_reg_0_avs_s0_agent_rp_valid;                              // sysinfo_reg_0_avs_s0_agent:rp_valid -> router_002:sink_valid
	wire  [119:0] sysinfo_reg_0_avs_s0_agent_rp_data;                               // sysinfo_reg_0_avs_s0_agent:rp_data -> router_002:sink_data
	wire          sysinfo_reg_0_avs_s0_agent_rp_ready;                              // router_002:sink_ready -> sysinfo_reg_0_avs_s0_agent:rp_ready
	wire          sysinfo_reg_0_avs_s0_agent_rp_startofpacket;                      // sysinfo_reg_0_avs_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          sysinfo_reg_0_avs_s0_agent_rp_endofpacket;                        // sysinfo_reg_0_avs_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> rsp_demux:sink_valid
	wire  [119:0] router_002_src_data;                                              // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                             // rsp_demux:sink_ready -> router_002:src_ready
	wire    [9:0] router_002_src_channel;                                           // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                          // sysid_qsys_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [119:0] sysid_qsys_control_slave_agent_rp_data;                           // sysid_qsys_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                          // router_003:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                  // sysid_qsys_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                    // sysid_qsys_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [119:0] router_003_src_data;                                              // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                             // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [9:0] router_003_src_channel;                                           // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          overlay_dma_csr_agent_rp_valid;                                   // overlay_dma_csr_agent:rp_valid -> router_004:sink_valid
	wire  [119:0] overlay_dma_csr_agent_rp_data;                                    // overlay_dma_csr_agent:rp_data -> router_004:sink_data
	wire          overlay_dma_csr_agent_rp_ready;                                   // router_004:sink_ready -> overlay_dma_csr_agent:rp_ready
	wire          overlay_dma_csr_agent_rp_startofpacket;                           // overlay_dma_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          overlay_dma_csr_agent_rp_endofpacket;                             // overlay_dma_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                             // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [119:0] router_004_src_data;                                              // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                             // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [9:0] router_004_src_channel;                                           // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                     // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                       // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          render_dma_csr_agent_rp_valid;                                    // render_dma_csr_agent:rp_valid -> router_005:sink_valid
	wire  [119:0] render_dma_csr_agent_rp_data;                                     // render_dma_csr_agent:rp_data -> router_005:sink_data
	wire          render_dma_csr_agent_rp_ready;                                    // router_005:sink_ready -> render_dma_csr_agent:rp_ready
	wire          render_dma_csr_agent_rp_startofpacket;                            // render_dma_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          render_dma_csr_agent_rp_endofpacket;                              // render_dma_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                             // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [119:0] router_005_src_data;                                              // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                             // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [9:0] router_005_src_channel;                                           // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                     // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                       // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          overlay_dma_descriptor_slave_agent_rp_valid;                      // overlay_dma_descriptor_slave_agent:rp_valid -> router_006:sink_valid
	wire  [227:0] overlay_dma_descriptor_slave_agent_rp_data;                       // overlay_dma_descriptor_slave_agent:rp_data -> router_006:sink_data
	wire          overlay_dma_descriptor_slave_agent_rp_ready;                      // router_006:sink_ready -> overlay_dma_descriptor_slave_agent:rp_ready
	wire          overlay_dma_descriptor_slave_agent_rp_startofpacket;              // overlay_dma_descriptor_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          overlay_dma_descriptor_slave_agent_rp_endofpacket;                // overlay_dma_descriptor_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          render_dma_descriptor_slave_agent_rp_valid;                       // render_dma_descriptor_slave_agent:rp_valid -> router_007:sink_valid
	wire  [227:0] render_dma_descriptor_slave_agent_rp_data;                        // render_dma_descriptor_slave_agent:rp_data -> router_007:sink_data
	wire          render_dma_descriptor_slave_agent_rp_ready;                       // router_007:sink_ready -> render_dma_descriptor_slave_agent:rp_ready
	wire          render_dma_descriptor_slave_agent_rp_startofpacket;               // render_dma_descriptor_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          render_dma_descriptor_slave_agent_rp_endofpacket;                 // render_dma_descriptor_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          avalon_slave_edid_0_s0_agent_rp_valid;                            // avalon_slave_edid_0_s0_agent:rp_valid -> router_008:sink_valid
	wire   [92:0] avalon_slave_edid_0_s0_agent_rp_data;                             // avalon_slave_edid_0_s0_agent:rp_data -> router_008:sink_data
	wire          avalon_slave_edid_0_s0_agent_rp_ready;                            // router_008:sink_ready -> avalon_slave_edid_0_s0_agent:rp_ready
	wire          avalon_slave_edid_0_s0_agent_rp_startofpacket;                    // avalon_slave_edid_0_s0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          avalon_slave_edid_0_s0_agent_rp_endofpacket;                      // avalon_slave_edid_0_s0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                        // led_pio_s1_agent:rp_valid -> router_009:sink_valid
	wire  [119:0] led_pio_s1_agent_rp_data;                                         // led_pio_s1_agent:rp_data -> router_009:sink_data
	wire          led_pio_s1_agent_rp_ready;                                        // router_009:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                                // led_pio_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                  // led_pio_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                             // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [119:0] router_009_src_data;                                              // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                             // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [9:0] router_009_src_channel;                                           // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                     // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                       // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                      // dipsw_pio_s1_agent:rp_valid -> router_010:sink_valid
	wire  [119:0] dipsw_pio_s1_agent_rp_data;                                       // dipsw_pio_s1_agent:rp_data -> router_010:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                      // router_010:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          dipsw_pio_s1_agent_rp_startofpacket;                              // dipsw_pio_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          dipsw_pio_s1_agent_rp_endofpacket;                                // dipsw_pio_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                             // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [119:0] router_010_src_data;                                              // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                             // rsp_demux_008:sink_ready -> router_010:src_ready
	wire    [9:0] router_010_src_channel;                                           // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                     // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                       // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                     // button_pio_s1_agent:rp_valid -> router_011:sink_valid
	wire  [119:0] button_pio_s1_agent_rp_data;                                      // button_pio_s1_agent:rp_data -> router_011:sink_data
	wire          button_pio_s1_agent_rp_ready;                                     // router_011:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                             // button_pio_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                               // button_pio_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                             // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [119:0] router_011_src_data;                                              // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                             // rsp_demux_009:sink_ready -> router_011:src_ready
	wire    [9:0] router_011_src_channel;                                           // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                     // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                       // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [119:0] router_src_data;                                                  // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [9:0] router_src_channel;                                               // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [119:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                 // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [9:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [9:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                 // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [9:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;               // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [119:0] router_001_src_data;                                              // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [9:0] router_001_src_channel;                                           // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [119:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                 // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [9:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                            // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_001_src_data;                                             // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [9:0] rsp_mux_001_src_channel;                                          // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                    // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                      // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                 // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [9:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;               // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> sysinfo_reg_0_avs_s0_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> sysinfo_reg_0_avs_s0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                // sysinfo_reg_0_avs_s0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [9:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> sysinfo_reg_0_avs_s0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> sysinfo_reg_0_avs_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> sysinfo_reg_0_avs_s0_burst_adapter:sink0_endofpacket
	wire          sysinfo_reg_0_avs_s0_burst_adapter_source0_valid;                 // sysinfo_reg_0_avs_s0_burst_adapter:source0_valid -> sysinfo_reg_0_avs_s0_agent:cp_valid
	wire  [119:0] sysinfo_reg_0_avs_s0_burst_adapter_source0_data;                  // sysinfo_reg_0_avs_s0_burst_adapter:source0_data -> sysinfo_reg_0_avs_s0_agent:cp_data
	wire          sysinfo_reg_0_avs_s0_burst_adapter_source0_ready;                 // sysinfo_reg_0_avs_s0_agent:cp_ready -> sysinfo_reg_0_avs_s0_burst_adapter:source0_ready
	wire    [9:0] sysinfo_reg_0_avs_s0_burst_adapter_source0_channel;               // sysinfo_reg_0_avs_s0_burst_adapter:source0_channel -> sysinfo_reg_0_avs_s0_agent:cp_channel
	wire          sysinfo_reg_0_avs_s0_burst_adapter_source0_startofpacket;         // sysinfo_reg_0_avs_s0_burst_adapter:source0_startofpacket -> sysinfo_reg_0_avs_s0_agent:cp_startofpacket
	wire          sysinfo_reg_0_avs_s0_burst_adapter_source0_endofpacket;           // sysinfo_reg_0_avs_s0_burst_adapter:source0_endofpacket -> sysinfo_reg_0_avs_s0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                            // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [9:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;             // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [119:0] sysid_qsys_control_slave_burst_adapter_source0_data;              // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;             // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire    [9:0] sysid_qsys_control_slave_burst_adapter_source0_channel;           // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;     // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;       // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                            // cmd_mux_002:src_valid -> overlay_dma_csr_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_002_src_data;                                             // cmd_mux_002:src_data -> overlay_dma_csr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                            // overlay_dma_csr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [9:0] cmd_mux_002_src_channel;                                          // cmd_mux_002:src_channel -> overlay_dma_csr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                    // cmd_mux_002:src_startofpacket -> overlay_dma_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                      // cmd_mux_002:src_endofpacket -> overlay_dma_csr_burst_adapter:sink0_endofpacket
	wire          overlay_dma_csr_burst_adapter_source0_valid;                      // overlay_dma_csr_burst_adapter:source0_valid -> overlay_dma_csr_agent:cp_valid
	wire  [119:0] overlay_dma_csr_burst_adapter_source0_data;                       // overlay_dma_csr_burst_adapter:source0_data -> overlay_dma_csr_agent:cp_data
	wire          overlay_dma_csr_burst_adapter_source0_ready;                      // overlay_dma_csr_agent:cp_ready -> overlay_dma_csr_burst_adapter:source0_ready
	wire    [9:0] overlay_dma_csr_burst_adapter_source0_channel;                    // overlay_dma_csr_burst_adapter:source0_channel -> overlay_dma_csr_agent:cp_channel
	wire          overlay_dma_csr_burst_adapter_source0_startofpacket;              // overlay_dma_csr_burst_adapter:source0_startofpacket -> overlay_dma_csr_agent:cp_startofpacket
	wire          overlay_dma_csr_burst_adapter_source0_endofpacket;                // overlay_dma_csr_burst_adapter:source0_endofpacket -> overlay_dma_csr_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                            // cmd_mux_003:src_valid -> render_dma_csr_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_003_src_data;                                             // cmd_mux_003:src_data -> render_dma_csr_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                            // render_dma_csr_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [9:0] cmd_mux_003_src_channel;                                          // cmd_mux_003:src_channel -> render_dma_csr_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                    // cmd_mux_003:src_startofpacket -> render_dma_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                      // cmd_mux_003:src_endofpacket -> render_dma_csr_burst_adapter:sink0_endofpacket
	wire          render_dma_csr_burst_adapter_source0_valid;                       // render_dma_csr_burst_adapter:source0_valid -> render_dma_csr_agent:cp_valid
	wire  [119:0] render_dma_csr_burst_adapter_source0_data;                        // render_dma_csr_burst_adapter:source0_data -> render_dma_csr_agent:cp_data
	wire          render_dma_csr_burst_adapter_source0_ready;                       // render_dma_csr_agent:cp_ready -> render_dma_csr_burst_adapter:source0_ready
	wire    [9:0] render_dma_csr_burst_adapter_source0_channel;                     // render_dma_csr_burst_adapter:source0_channel -> render_dma_csr_agent:cp_channel
	wire          render_dma_csr_burst_adapter_source0_startofpacket;               // render_dma_csr_burst_adapter:source0_startofpacket -> render_dma_csr_agent:cp_startofpacket
	wire          render_dma_csr_burst_adapter_source0_endofpacket;                 // render_dma_csr_burst_adapter:source0_endofpacket -> render_dma_csr_agent:cp_endofpacket
	wire          overlay_dma_descriptor_slave_burst_adapter_source0_valid;         // overlay_dma_descriptor_slave_burst_adapter:source0_valid -> overlay_dma_descriptor_slave_agent:cp_valid
	wire  [227:0] overlay_dma_descriptor_slave_burst_adapter_source0_data;          // overlay_dma_descriptor_slave_burst_adapter:source0_data -> overlay_dma_descriptor_slave_agent:cp_data
	wire          overlay_dma_descriptor_slave_burst_adapter_source0_ready;         // overlay_dma_descriptor_slave_agent:cp_ready -> overlay_dma_descriptor_slave_burst_adapter:source0_ready
	wire    [9:0] overlay_dma_descriptor_slave_burst_adapter_source0_channel;       // overlay_dma_descriptor_slave_burst_adapter:source0_channel -> overlay_dma_descriptor_slave_agent:cp_channel
	wire          overlay_dma_descriptor_slave_burst_adapter_source0_startofpacket; // overlay_dma_descriptor_slave_burst_adapter:source0_startofpacket -> overlay_dma_descriptor_slave_agent:cp_startofpacket
	wire          overlay_dma_descriptor_slave_burst_adapter_source0_endofpacket;   // overlay_dma_descriptor_slave_burst_adapter:source0_endofpacket -> overlay_dma_descriptor_slave_agent:cp_endofpacket
	wire          render_dma_descriptor_slave_burst_adapter_source0_valid;          // render_dma_descriptor_slave_burst_adapter:source0_valid -> render_dma_descriptor_slave_agent:cp_valid
	wire  [227:0] render_dma_descriptor_slave_burst_adapter_source0_data;           // render_dma_descriptor_slave_burst_adapter:source0_data -> render_dma_descriptor_slave_agent:cp_data
	wire          render_dma_descriptor_slave_burst_adapter_source0_ready;          // render_dma_descriptor_slave_agent:cp_ready -> render_dma_descriptor_slave_burst_adapter:source0_ready
	wire    [9:0] render_dma_descriptor_slave_burst_adapter_source0_channel;        // render_dma_descriptor_slave_burst_adapter:source0_channel -> render_dma_descriptor_slave_agent:cp_channel
	wire          render_dma_descriptor_slave_burst_adapter_source0_startofpacket;  // render_dma_descriptor_slave_burst_adapter:source0_startofpacket -> render_dma_descriptor_slave_agent:cp_startofpacket
	wire          render_dma_descriptor_slave_burst_adapter_source0_endofpacket;    // render_dma_descriptor_slave_burst_adapter:source0_endofpacket -> render_dma_descriptor_slave_agent:cp_endofpacket
	wire          avalon_slave_edid_0_s0_burst_adapter_source0_valid;               // avalon_slave_edid_0_s0_burst_adapter:source0_valid -> avalon_slave_edid_0_s0_agent:cp_valid
	wire   [92:0] avalon_slave_edid_0_s0_burst_adapter_source0_data;                // avalon_slave_edid_0_s0_burst_adapter:source0_data -> avalon_slave_edid_0_s0_agent:cp_data
	wire          avalon_slave_edid_0_s0_burst_adapter_source0_ready;               // avalon_slave_edid_0_s0_agent:cp_ready -> avalon_slave_edid_0_s0_burst_adapter:source0_ready
	wire    [9:0] avalon_slave_edid_0_s0_burst_adapter_source0_channel;             // avalon_slave_edid_0_s0_burst_adapter:source0_channel -> avalon_slave_edid_0_s0_agent:cp_channel
	wire          avalon_slave_edid_0_s0_burst_adapter_source0_startofpacket;       // avalon_slave_edid_0_s0_burst_adapter:source0_startofpacket -> avalon_slave_edid_0_s0_agent:cp_startofpacket
	wire          avalon_slave_edid_0_s0_burst_adapter_source0_endofpacket;         // avalon_slave_edid_0_s0_burst_adapter:source0_endofpacket -> avalon_slave_edid_0_s0_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                            // cmd_mux_007:src_valid -> led_pio_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_007_src_data;                                             // cmd_mux_007:src_data -> led_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                            // led_pio_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [9:0] cmd_mux_007_src_channel;                                          // cmd_mux_007:src_channel -> led_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                    // cmd_mux_007:src_startofpacket -> led_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                      // cmd_mux_007:src_endofpacket -> led_pio_s1_burst_adapter:sink0_endofpacket
	wire          led_pio_s1_burst_adapter_source0_valid;                           // led_pio_s1_burst_adapter:source0_valid -> led_pio_s1_agent:cp_valid
	wire  [119:0] led_pio_s1_burst_adapter_source0_data;                            // led_pio_s1_burst_adapter:source0_data -> led_pio_s1_agent:cp_data
	wire          led_pio_s1_burst_adapter_source0_ready;                           // led_pio_s1_agent:cp_ready -> led_pio_s1_burst_adapter:source0_ready
	wire    [9:0] led_pio_s1_burst_adapter_source0_channel;                         // led_pio_s1_burst_adapter:source0_channel -> led_pio_s1_agent:cp_channel
	wire          led_pio_s1_burst_adapter_source0_startofpacket;                   // led_pio_s1_burst_adapter:source0_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          led_pio_s1_burst_adapter_source0_endofpacket;                     // led_pio_s1_burst_adapter:source0_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                            // cmd_mux_008:src_valid -> dipsw_pio_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_008_src_data;                                             // cmd_mux_008:src_data -> dipsw_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                            // dipsw_pio_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire    [9:0] cmd_mux_008_src_channel;                                          // cmd_mux_008:src_channel -> dipsw_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                    // cmd_mux_008:src_startofpacket -> dipsw_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                      // cmd_mux_008:src_endofpacket -> dipsw_pio_s1_burst_adapter:sink0_endofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_valid;                         // dipsw_pio_s1_burst_adapter:source0_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [119:0] dipsw_pio_s1_burst_adapter_source0_data;                          // dipsw_pio_s1_burst_adapter:source0_data -> dipsw_pio_s1_agent:cp_data
	wire          dipsw_pio_s1_burst_adapter_source0_ready;                         // dipsw_pio_s1_agent:cp_ready -> dipsw_pio_s1_burst_adapter:source0_ready
	wire    [9:0] dipsw_pio_s1_burst_adapter_source0_channel;                       // dipsw_pio_s1_burst_adapter:source0_channel -> dipsw_pio_s1_agent:cp_channel
	wire          dipsw_pio_s1_burst_adapter_source0_startofpacket;                 // dipsw_pio_s1_burst_adapter:source0_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_endofpacket;                   // dipsw_pio_s1_burst_adapter:source0_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                            // cmd_mux_009:src_valid -> button_pio_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_009_src_data;                                             // cmd_mux_009:src_data -> button_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                            // button_pio_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire    [9:0] cmd_mux_009_src_channel;                                          // cmd_mux_009:src_channel -> button_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                    // cmd_mux_009:src_startofpacket -> button_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                      // cmd_mux_009:src_endofpacket -> button_pio_s1_burst_adapter:sink0_endofpacket
	wire          button_pio_s1_burst_adapter_source0_valid;                        // button_pio_s1_burst_adapter:source0_valid -> button_pio_s1_agent:cp_valid
	wire  [119:0] button_pio_s1_burst_adapter_source0_data;                         // button_pio_s1_burst_adapter:source0_data -> button_pio_s1_agent:cp_data
	wire          button_pio_s1_burst_adapter_source0_ready;                        // button_pio_s1_agent:cp_ready -> button_pio_s1_burst_adapter:source0_ready
	wire    [9:0] button_pio_s1_burst_adapter_source0_channel;                      // button_pio_s1_burst_adapter:source0_channel -> button_pio_s1_agent:cp_channel
	wire          button_pio_s1_burst_adapter_source0_startofpacket;                // button_pio_s1_burst_adapter:source0_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          button_pio_s1_burst_adapter_source0_endofpacket;                  // button_pio_s1_burst_adapter:source0_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [119:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [9:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] cmd_demux_src1_data;                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [9:0] cmd_demux_src1_channel;                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [119:0] cmd_demux_src2_data;                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [9:0] cmd_demux_src2_channel;                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [119:0] cmd_demux_src4_data;                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [9:0] cmd_demux_src4_channel;                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [119:0] cmd_demux_src6_data;                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [9:0] cmd_demux_src6_channel;                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [119:0] cmd_demux_src7_data;                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [9:0] cmd_demux_src7_channel;                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [119:0] cmd_demux_src8_data;                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [9:0] cmd_demux_src8_channel;                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [119:0] cmd_demux_src9_data;                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire    [9:0] cmd_demux_src9_channel;                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [119:0] cmd_demux_001_src0_data;                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [9:0] cmd_demux_001_src0_channel;                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [119:0] cmd_demux_001_src1_data;                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                         // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [9:0] cmd_demux_001_src1_channel;                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [119:0] cmd_demux_001_src2_data;                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [9:0] cmd_demux_001_src2_channel;                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [119:0] cmd_demux_001_src4_data;                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [9:0] cmd_demux_001_src4_channel;                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                         // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [119:0] cmd_demux_001_src6_data;                                          // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                         // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire    [9:0] cmd_demux_001_src6_channel;                                       // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                 // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                   // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                         // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [119:0] cmd_demux_001_src7_data;                                          // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                         // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire    [9:0] cmd_demux_001_src7_channel;                                       // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                 // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                   // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                         // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [119:0] cmd_demux_001_src8_data;                                          // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                         // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire    [9:0] cmd_demux_001_src8_channel;                                       // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                 // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                   // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                         // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [119:0] cmd_demux_001_src9_data;                                          // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                         // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire    [9:0] cmd_demux_001_src9_channel;                                       // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                 // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                   // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [119:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [9:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [119:0] rsp_demux_src1_data;                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [9:0] rsp_demux_src1_channel;                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [119:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [9:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                         // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [119:0] rsp_demux_001_src1_data;                                          // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [9:0] rsp_demux_001_src1_channel;                                       // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [119:0] rsp_demux_002_src0_data;                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [9:0] rsp_demux_002_src0_channel;                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [119:0] rsp_demux_002_src1_data;                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [9:0] rsp_demux_002_src1_channel;                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [119:0] rsp_demux_004_src0_data;                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [9:0] rsp_demux_004_src0_channel;                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [119:0] rsp_demux_004_src1_data;                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [9:0] rsp_demux_004_src1_channel;                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_006_src0_valid;                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [119:0] rsp_demux_006_src0_data;                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [9:0] rsp_demux_006_src0_channel;                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                         // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [119:0] rsp_demux_006_src1_data;                                          // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                         // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire    [9:0] rsp_demux_006_src1_channel;                                       // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                 // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                   // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [119:0] rsp_demux_007_src0_data;                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [9:0] rsp_demux_007_src0_channel;                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                         // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [119:0] rsp_demux_007_src1_data;                                          // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                         // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire    [9:0] rsp_demux_007_src1_channel;                                       // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                 // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                   // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [119:0] rsp_demux_008_src0_data;                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [9:0] rsp_demux_008_src0_channel;                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                         // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [119:0] rsp_demux_008_src1_data;                                          // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                         // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire    [9:0] rsp_demux_008_src1_channel;                                       // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [119:0] rsp_demux_009_src0_data;                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire    [9:0] rsp_demux_009_src0_channel;                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                         // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [119:0] rsp_demux_009_src1_data;                                          // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                         // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire    [9:0] rsp_demux_009_src1_channel;                                       // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                 // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                   // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          router_006_src_valid;                                             // router_006:src_valid -> overlay_dma_descriptor_slave_rsp_width_adapter:in_valid
	wire  [227:0] router_006_src_data;                                              // router_006:src_data -> overlay_dma_descriptor_slave_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                             // overlay_dma_descriptor_slave_rsp_width_adapter:in_ready -> router_006:src_ready
	wire    [9:0] router_006_src_channel;                                           // router_006:src_channel -> overlay_dma_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                     // router_006:src_startofpacket -> overlay_dma_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                       // router_006:src_endofpacket -> overlay_dma_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          overlay_dma_descriptor_slave_rsp_width_adapter_src_valid;         // overlay_dma_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [119:0] overlay_dma_descriptor_slave_rsp_width_adapter_src_data;          // overlay_dma_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          overlay_dma_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_004:sink_ready -> overlay_dma_descriptor_slave_rsp_width_adapter:out_ready
	wire    [9:0] overlay_dma_descriptor_slave_rsp_width_adapter_src_channel;       // overlay_dma_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          overlay_dma_descriptor_slave_rsp_width_adapter_src_startofpacket; // overlay_dma_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          overlay_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;   // overlay_dma_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                             // router_007:src_valid -> render_dma_descriptor_slave_rsp_width_adapter:in_valid
	wire  [227:0] router_007_src_data;                                              // router_007:src_data -> render_dma_descriptor_slave_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                             // render_dma_descriptor_slave_rsp_width_adapter:in_ready -> router_007:src_ready
	wire    [9:0] router_007_src_channel;                                           // router_007:src_channel -> render_dma_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                     // router_007:src_startofpacket -> render_dma_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                       // router_007:src_endofpacket -> render_dma_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          render_dma_descriptor_slave_rsp_width_adapter_src_valid;          // render_dma_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [119:0] render_dma_descriptor_slave_rsp_width_adapter_src_data;           // render_dma_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          render_dma_descriptor_slave_rsp_width_adapter_src_ready;          // rsp_demux_005:sink_ready -> render_dma_descriptor_slave_rsp_width_adapter:out_ready
	wire    [9:0] render_dma_descriptor_slave_rsp_width_adapter_src_channel;        // render_dma_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          render_dma_descriptor_slave_rsp_width_adapter_src_startofpacket;  // render_dma_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          render_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;    // render_dma_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                             // router_008:src_valid -> avalon_slave_edid_0_s0_rsp_width_adapter:in_valid
	wire   [92:0] router_008_src_data;                                              // router_008:src_data -> avalon_slave_edid_0_s0_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                             // avalon_slave_edid_0_s0_rsp_width_adapter:in_ready -> router_008:src_ready
	wire    [9:0] router_008_src_channel;                                           // router_008:src_channel -> avalon_slave_edid_0_s0_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                     // router_008:src_startofpacket -> avalon_slave_edid_0_s0_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                       // router_008:src_endofpacket -> avalon_slave_edid_0_s0_rsp_width_adapter:in_endofpacket
	wire          avalon_slave_edid_0_s0_rsp_width_adapter_src_valid;               // avalon_slave_edid_0_s0_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [119:0] avalon_slave_edid_0_s0_rsp_width_adapter_src_data;                // avalon_slave_edid_0_s0_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          avalon_slave_edid_0_s0_rsp_width_adapter_src_ready;               // rsp_demux_006:sink_ready -> avalon_slave_edid_0_s0_rsp_width_adapter:out_ready
	wire    [9:0] avalon_slave_edid_0_s0_rsp_width_adapter_src_channel;             // avalon_slave_edid_0_s0_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          avalon_slave_edid_0_s0_rsp_width_adapter_src_startofpacket;       // avalon_slave_edid_0_s0_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          avalon_slave_edid_0_s0_rsp_width_adapter_src_endofpacket;         // avalon_slave_edid_0_s0_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                            // cmd_mux_004:src_valid -> overlay_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_004_src_data;                                             // cmd_mux_004:src_data -> overlay_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                            // overlay_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [9:0] cmd_mux_004_src_channel;                                          // cmd_mux_004:src_channel -> overlay_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                    // cmd_mux_004:src_startofpacket -> overlay_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                      // cmd_mux_004:src_endofpacket -> overlay_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          overlay_dma_descriptor_slave_cmd_width_adapter_src_valid;         // overlay_dma_descriptor_slave_cmd_width_adapter:out_valid -> overlay_dma_descriptor_slave_burst_adapter:sink0_valid
	wire  [227:0] overlay_dma_descriptor_slave_cmd_width_adapter_src_data;          // overlay_dma_descriptor_slave_cmd_width_adapter:out_data -> overlay_dma_descriptor_slave_burst_adapter:sink0_data
	wire          overlay_dma_descriptor_slave_cmd_width_adapter_src_ready;         // overlay_dma_descriptor_slave_burst_adapter:sink0_ready -> overlay_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire    [9:0] overlay_dma_descriptor_slave_cmd_width_adapter_src_channel;       // overlay_dma_descriptor_slave_cmd_width_adapter:out_channel -> overlay_dma_descriptor_slave_burst_adapter:sink0_channel
	wire          overlay_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // overlay_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> overlay_dma_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          overlay_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // overlay_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> overlay_dma_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                            // cmd_mux_005:src_valid -> render_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_005_src_data;                                             // cmd_mux_005:src_data -> render_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                            // render_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire    [9:0] cmd_mux_005_src_channel;                                          // cmd_mux_005:src_channel -> render_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                    // cmd_mux_005:src_startofpacket -> render_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                      // cmd_mux_005:src_endofpacket -> render_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          render_dma_descriptor_slave_cmd_width_adapter_src_valid;          // render_dma_descriptor_slave_cmd_width_adapter:out_valid -> render_dma_descriptor_slave_burst_adapter:sink0_valid
	wire  [227:0] render_dma_descriptor_slave_cmd_width_adapter_src_data;           // render_dma_descriptor_slave_cmd_width_adapter:out_data -> render_dma_descriptor_slave_burst_adapter:sink0_data
	wire          render_dma_descriptor_slave_cmd_width_adapter_src_ready;          // render_dma_descriptor_slave_burst_adapter:sink0_ready -> render_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire    [9:0] render_dma_descriptor_slave_cmd_width_adapter_src_channel;        // render_dma_descriptor_slave_cmd_width_adapter:out_channel -> render_dma_descriptor_slave_burst_adapter:sink0_channel
	wire          render_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;  // render_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> render_dma_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          render_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;    // render_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> render_dma_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                            // cmd_mux_006:src_valid -> avalon_slave_edid_0_s0_cmd_width_adapter:in_valid
	wire  [119:0] cmd_mux_006_src_data;                                             // cmd_mux_006:src_data -> avalon_slave_edid_0_s0_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                            // avalon_slave_edid_0_s0_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire    [9:0] cmd_mux_006_src_channel;                                          // cmd_mux_006:src_channel -> avalon_slave_edid_0_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                                    // cmd_mux_006:src_startofpacket -> avalon_slave_edid_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                      // cmd_mux_006:src_endofpacket -> avalon_slave_edid_0_s0_cmd_width_adapter:in_endofpacket
	wire          avalon_slave_edid_0_s0_cmd_width_adapter_src_valid;               // avalon_slave_edid_0_s0_cmd_width_adapter:out_valid -> avalon_slave_edid_0_s0_burst_adapter:sink0_valid
	wire   [92:0] avalon_slave_edid_0_s0_cmd_width_adapter_src_data;                // avalon_slave_edid_0_s0_cmd_width_adapter:out_data -> avalon_slave_edid_0_s0_burst_adapter:sink0_data
	wire          avalon_slave_edid_0_s0_cmd_width_adapter_src_ready;               // avalon_slave_edid_0_s0_burst_adapter:sink0_ready -> avalon_slave_edid_0_s0_cmd_width_adapter:out_ready
	wire    [9:0] avalon_slave_edid_0_s0_cmd_width_adapter_src_channel;             // avalon_slave_edid_0_s0_cmd_width_adapter:out_channel -> avalon_slave_edid_0_s0_burst_adapter:sink0_channel
	wire          avalon_slave_edid_0_s0_cmd_width_adapter_src_startofpacket;       // avalon_slave_edid_0_s0_cmd_width_adapter:out_startofpacket -> avalon_slave_edid_0_s0_burst_adapter:sink0_startofpacket
	wire          avalon_slave_edid_0_s0_cmd_width_adapter_src_endofpacket;         // avalon_slave_edid_0_s0_cmd_width_adapter:out_endofpacket -> avalon_slave_edid_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                             // cmd_demux:src3_valid -> crosser:in_valid
	wire  [119:0] cmd_demux_src3_data;                                              // cmd_demux:src3_data -> crosser:in_data
	wire          cmd_demux_src3_ready;                                             // crosser:in_ready -> cmd_demux:src3_ready
	wire    [9:0] cmd_demux_src3_channel;                                           // cmd_demux:src3_channel -> crosser:in_channel
	wire          cmd_demux_src3_startofpacket;                                     // cmd_demux:src3_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                       // cmd_demux:src3_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                // crosser:out_valid -> cmd_mux_003:sink0_valid
	wire  [119:0] crosser_out_data;                                                 // crosser:out_data -> cmd_mux_003:sink0_data
	wire          crosser_out_ready;                                                // cmd_mux_003:sink0_ready -> crosser:out_ready
	wire    [9:0] crosser_out_channel;                                              // crosser:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_out_startofpacket;                                        // crosser:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_out_endofpacket;                                          // crosser:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                             // cmd_demux:src5_valid -> crosser_001:in_valid
	wire  [119:0] cmd_demux_src5_data;                                              // cmd_demux:src5_data -> crosser_001:in_data
	wire          cmd_demux_src5_ready;                                             // crosser_001:in_ready -> cmd_demux:src5_ready
	wire    [9:0] cmd_demux_src5_channel;                                           // cmd_demux:src5_channel -> crosser_001:in_channel
	wire          cmd_demux_src5_startofpacket;                                     // cmd_demux:src5_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                       // cmd_demux:src5_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                            // crosser_001:out_valid -> cmd_mux_005:sink0_valid
	wire  [119:0] crosser_001_out_data;                                             // crosser_001:out_data -> cmd_mux_005:sink0_data
	wire          crosser_001_out_ready;                                            // cmd_mux_005:sink0_ready -> crosser_001:out_ready
	wire    [9:0] crosser_001_out_channel;                                          // crosser_001:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_001_out_startofpacket;                                    // crosser_001:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                      // crosser_001:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                         // cmd_demux_001:src3_valid -> crosser_002:in_valid
	wire  [119:0] cmd_demux_001_src3_data;                                          // cmd_demux_001:src3_data -> crosser_002:in_data
	wire          cmd_demux_001_src3_ready;                                         // crosser_002:in_ready -> cmd_demux_001:src3_ready
	wire    [9:0] cmd_demux_001_src3_channel;                                       // cmd_demux_001:src3_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                 // cmd_demux_001:src3_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                   // cmd_demux_001:src3_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                            // crosser_002:out_valid -> cmd_mux_003:sink1_valid
	wire  [119:0] crosser_002_out_data;                                             // crosser_002:out_data -> cmd_mux_003:sink1_data
	wire          crosser_002_out_ready;                                            // cmd_mux_003:sink1_ready -> crosser_002:out_ready
	wire    [9:0] crosser_002_out_channel;                                          // crosser_002:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_002_out_startofpacket;                                    // crosser_002:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                      // crosser_002:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                         // cmd_demux_001:src5_valid -> crosser_003:in_valid
	wire  [119:0] cmd_demux_001_src5_data;                                          // cmd_demux_001:src5_data -> crosser_003:in_data
	wire          cmd_demux_001_src5_ready;                                         // crosser_003:in_ready -> cmd_demux_001:src5_ready
	wire    [9:0] cmd_demux_001_src5_channel;                                       // cmd_demux_001:src5_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                 // cmd_demux_001:src5_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                   // cmd_demux_001:src5_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                            // crosser_003:out_valid -> cmd_mux_005:sink1_valid
	wire  [119:0] crosser_003_out_data;                                             // crosser_003:out_data -> cmd_mux_005:sink1_data
	wire          crosser_003_out_ready;                                            // cmd_mux_005:sink1_ready -> crosser_003:out_ready
	wire    [9:0] crosser_003_out_channel;                                          // crosser_003:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_003_out_startofpacket;                                    // crosser_003:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                      // crosser_003:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                         // rsp_demux_003:src0_valid -> crosser_004:in_valid
	wire  [119:0] rsp_demux_003_src0_data;                                          // rsp_demux_003:src0_data -> crosser_004:in_data
	wire          rsp_demux_003_src0_ready;                                         // crosser_004:in_ready -> rsp_demux_003:src0_ready
	wire    [9:0] rsp_demux_003_src0_channel;                                       // rsp_demux_003:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                 // rsp_demux_003:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                   // rsp_demux_003:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                            // crosser_004:out_valid -> rsp_mux:sink3_valid
	wire  [119:0] crosser_004_out_data;                                             // crosser_004:out_data -> rsp_mux:sink3_data
	wire          crosser_004_out_ready;                                            // rsp_mux:sink3_ready -> crosser_004:out_ready
	wire    [9:0] crosser_004_out_channel;                                          // crosser_004:out_channel -> rsp_mux:sink3_channel
	wire          crosser_004_out_startofpacket;                                    // crosser_004:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_004_out_endofpacket;                                      // crosser_004:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                         // rsp_demux_003:src1_valid -> crosser_005:in_valid
	wire  [119:0] rsp_demux_003_src1_data;                                          // rsp_demux_003:src1_data -> crosser_005:in_data
	wire          rsp_demux_003_src1_ready;                                         // crosser_005:in_ready -> rsp_demux_003:src1_ready
	wire    [9:0] rsp_demux_003_src1_channel;                                       // rsp_demux_003:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                 // rsp_demux_003:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                   // rsp_demux_003:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                            // crosser_005:out_valid -> rsp_mux_001:sink3_valid
	wire  [119:0] crosser_005_out_data;                                             // crosser_005:out_data -> rsp_mux_001:sink3_data
	wire          crosser_005_out_ready;                                            // rsp_mux_001:sink3_ready -> crosser_005:out_ready
	wire    [9:0] crosser_005_out_channel;                                          // crosser_005:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_005_out_startofpacket;                                    // crosser_005:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_005_out_endofpacket;                                      // crosser_005:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                         // rsp_demux_005:src0_valid -> crosser_006:in_valid
	wire  [119:0] rsp_demux_005_src0_data;                                          // rsp_demux_005:src0_data -> crosser_006:in_data
	wire          rsp_demux_005_src0_ready;                                         // crosser_006:in_ready -> rsp_demux_005:src0_ready
	wire    [9:0] rsp_demux_005_src0_channel;                                       // rsp_demux_005:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                 // rsp_demux_005:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                   // rsp_demux_005:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                            // crosser_006:out_valid -> rsp_mux:sink5_valid
	wire  [119:0] crosser_006_out_data;                                             // crosser_006:out_data -> rsp_mux:sink5_data
	wire          crosser_006_out_ready;                                            // rsp_mux:sink5_ready -> crosser_006:out_ready
	wire    [9:0] crosser_006_out_channel;                                          // crosser_006:out_channel -> rsp_mux:sink5_channel
	wire          crosser_006_out_startofpacket;                                    // crosser_006:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_006_out_endofpacket;                                      // crosser_006:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                         // rsp_demux_005:src1_valid -> crosser_007:in_valid
	wire  [119:0] rsp_demux_005_src1_data;                                          // rsp_demux_005:src1_data -> crosser_007:in_data
	wire          rsp_demux_005_src1_ready;                                         // crosser_007:in_ready -> rsp_demux_005:src1_ready
	wire    [9:0] rsp_demux_005_src1_channel;                                       // rsp_demux_005:src1_channel -> crosser_007:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                 // rsp_demux_005:src1_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                   // rsp_demux_005:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                            // crosser_007:out_valid -> rsp_mux_001:sink5_valid
	wire  [119:0] crosser_007_out_data;                                             // crosser_007:out_data -> rsp_mux_001:sink5_data
	wire          crosser_007_out_ready;                                            // rsp_mux_001:sink5_ready -> crosser_007:out_ready
	wire    [9:0] crosser_007_out_channel;                                          // crosser_007:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_007_out_startofpacket;                                    // crosser_007:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_007_out_endofpacket;                                      // crosser_007:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire    [9:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [9:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_valid;                  // sysinfo_reg_0_avs_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_data;                   // sysinfo_reg_0_avs_s0_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_ready;                  // avalon_st_adapter:in_0_ready -> sysinfo_reg_0_avs_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                    // avalon_st_adapter:out_0_valid -> sysinfo_reg_0_avs_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                     // avalon_st_adapter:out_0_data -> sysinfo_reg_0_avs_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                    // sysinfo_reg_0_avs_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                    // avalon_st_adapter:out_0_error -> sysinfo_reg_0_avs_s0_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;              // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;               // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;              // avalon_st_adapter_001:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                // avalon_st_adapter_001:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                 // avalon_st_adapter_001:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                // avalon_st_adapter_001:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          overlay_dma_csr_agent_rdata_fifo_out_valid;                       // overlay_dma_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] overlay_dma_csr_agent_rdata_fifo_out_data;                        // overlay_dma_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          overlay_dma_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_002:in_0_ready -> overlay_dma_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                // avalon_st_adapter_002:out_0_valid -> overlay_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                 // avalon_st_adapter_002:out_0_data -> overlay_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                // overlay_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                // avalon_st_adapter_002:out_0_error -> overlay_dma_csr_agent:rdata_fifo_sink_error
	wire          render_dma_csr_agent_rdata_fifo_out_valid;                        // render_dma_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] render_dma_csr_agent_rdata_fifo_out_data;                         // render_dma_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          render_dma_csr_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_003:in_0_ready -> render_dma_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                // avalon_st_adapter_003:out_0_valid -> render_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                 // avalon_st_adapter_003:out_0_data -> render_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                // render_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                // avalon_st_adapter_003:out_0_error -> render_dma_csr_agent:rdata_fifo_sink_error
	wire          overlay_dma_descriptor_slave_agent_rdata_fifo_out_valid;          // overlay_dma_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [129:0] overlay_dma_descriptor_slave_agent_rdata_fifo_out_data;           // overlay_dma_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          overlay_dma_descriptor_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_004:in_0_ready -> overlay_dma_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                // avalon_st_adapter_004:out_0_valid -> overlay_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_004_out_0_data;                                 // avalon_st_adapter_004:out_0_data -> overlay_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                // overlay_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                // avalon_st_adapter_004:out_0_error -> overlay_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          render_dma_descriptor_slave_agent_rdata_fifo_out_valid;           // render_dma_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [129:0] render_dma_descriptor_slave_agent_rdata_fifo_out_data;            // render_dma_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          render_dma_descriptor_slave_agent_rdata_fifo_out_ready;           // avalon_st_adapter_005:in_0_ready -> render_dma_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                // avalon_st_adapter_005:out_0_valid -> render_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_005_out_0_data;                                 // avalon_st_adapter_005:out_0_data -> render_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                // render_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                // avalon_st_adapter_005:out_0_error -> render_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          avalon_slave_edid_0_s0_agent_rdata_fifo_out_valid;                // avalon_slave_edid_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire    [9:0] avalon_slave_edid_0_s0_agent_rdata_fifo_out_data;                 // avalon_slave_edid_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          avalon_slave_edid_0_s0_agent_rdata_fifo_out_ready;                // avalon_st_adapter_006:in_0_ready -> avalon_slave_edid_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                // avalon_st_adapter_006:out_0_valid -> avalon_slave_edid_0_s0_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_006_out_0_data;                                 // avalon_st_adapter_006:out_0_data -> avalon_slave_edid_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                // avalon_slave_edid_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                // avalon_st_adapter_006:out_0_error -> avalon_slave_edid_0_s0_agent:rdata_fifo_sink_error
	wire          led_pio_s1_agent_rdata_fifo_out_valid;                            // led_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_out_data;                             // led_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          led_pio_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_007:in_0_ready -> led_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                // avalon_st_adapter_007:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                 // avalon_st_adapter_007:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                // avalon_st_adapter_007:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error
	wire          dipsw_pio_s1_agent_rdata_fifo_out_valid;                          // dipsw_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_out_data;                           // dipsw_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          dipsw_pio_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_008:in_0_ready -> dipsw_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                // avalon_st_adapter_008:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                 // avalon_st_adapter_008:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                // avalon_st_adapter_008:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire          button_pio_s1_agent_rdata_fifo_out_valid;                         // button_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_out_data;                          // button_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          button_pio_s1_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_009:in_0_ready -> button_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                // avalon_st_adapter_009:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                 // avalon_st_adapter_009:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                // avalon_st_adapter_009:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysinfo_reg_0_avs_s0_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysinfo_reg_0_avs_s0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sysinfo_reg_0_avs_s0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sysinfo_reg_0_avs_s0_agent_m0_read),              //                         .read
		.uav_write              (sysinfo_reg_0_avs_s0_agent_m0_write),             //                         .write
		.uav_waitrequest        (sysinfo_reg_0_avs_s0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sysinfo_reg_0_avs_s0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sysinfo_reg_0_avs_s0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sysinfo_reg_0_avs_s0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sysinfo_reg_0_avs_s0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sysinfo_reg_0_avs_s0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sysinfo_reg_0_avs_s0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sysinfo_reg_0_avs_s0_address),                    //      avalon_anti_slave_0.address
		.av_write               (sysinfo_reg_0_avs_s0_write),                      //                         .write
		.av_read                (sysinfo_reg_0_avs_s0_read),                       //                         .read
		.av_readdata            (sysinfo_reg_0_avs_s0_readdata),                   //                         .readdata
		.av_writedata           (sysinfo_reg_0_avs_s0_writedata),                  //                         .writedata
		.av_waitrequest         (sysinfo_reg_0_avs_s0_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) overlay_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (overlay_dma_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (overlay_dma_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (overlay_dma_csr_agent_m0_read),                   //                         .read
		.uav_write              (overlay_dma_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (overlay_dma_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (overlay_dma_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (overlay_dma_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (overlay_dma_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (overlay_dma_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (overlay_dma_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (overlay_dma_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (overlay_dma_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (overlay_dma_csr_write),                           //                         .write
		.av_read                (overlay_dma_csr_read),                            //                         .read
		.av_readdata            (overlay_dma_csr_readdata),                        //                         .readdata
		.av_writedata           (overlay_dma_csr_writedata),                       //                         .writedata
		.av_byteenable          (overlay_dma_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) render_dma_csr_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (render_dma_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (render_dma_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (render_dma_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (render_dma_csr_agent_m0_read),                   //                         .read
		.uav_write              (render_dma_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (render_dma_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (render_dma_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (render_dma_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (render_dma_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (render_dma_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (render_dma_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (render_dma_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (render_dma_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (render_dma_csr_write),                           //                         .write
		.av_read                (render_dma_csr_read),                            //                         .read
		.av_readdata            (render_dma_csr_readdata),                        //                         .readdata
		.av_writedata           (render_dma_csr_writedata),                       //                         .writedata
		.av_byteenable          (render_dma_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) overlay_dma_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),                                                                                       //                    reset.reset
		.uav_address            (overlay_dma_descriptor_slave_agent_m0_address),                                                                                         // avalon_universal_slave_0.address
		.uav_burstcount         (overlay_dma_descriptor_slave_agent_m0_burstcount),                                                                                      //                         .burstcount
		.uav_read               (overlay_dma_descriptor_slave_agent_m0_read),                                                                                            //                         .read
		.uav_write              (overlay_dma_descriptor_slave_agent_m0_write),                                                                                           //                         .write
		.uav_waitrequest        (overlay_dma_descriptor_slave_agent_m0_waitrequest),                                                                                     //                         .waitrequest
		.uav_readdatavalid      (overlay_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                   //                         .readdatavalid
		.uav_byteenable         (overlay_dma_descriptor_slave_agent_m0_byteenable),                                                                                      //                         .byteenable
		.uav_readdata           (overlay_dma_descriptor_slave_agent_m0_readdata),                                                                                        //                         .readdata
		.uav_writedata          (overlay_dma_descriptor_slave_agent_m0_writedata),                                                                                       //                         .writedata
		.uav_lock               (overlay_dma_descriptor_slave_agent_m0_lock),                                                                                            //                         .lock
		.uav_debugaccess        (overlay_dma_descriptor_slave_agent_m0_debugaccess),                                                                                     //                         .debugaccess
		.av_write               (overlay_dma_descriptor_slave_write),                                                                                                    //      avalon_anti_slave_0.write
		.av_writedata           (overlay_dma_descriptor_slave_writedata),                                                                                                //                         .writedata
		.av_byteenable          (overlay_dma_descriptor_slave_byteenable),                                                                                               //                         .byteenable
		.av_waitrequest         (overlay_dma_descriptor_slave_waitrequest),                                                                                              //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) render_dma_descriptor_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                                                                                                     //                      clk.clk
		.reset                  (render_dma_reset_n_reset_bridge_in_reset_reset),                                                                                        //                    reset.reset
		.uav_address            (render_dma_descriptor_slave_agent_m0_address),                                                                                          // avalon_universal_slave_0.address
		.uav_burstcount         (render_dma_descriptor_slave_agent_m0_burstcount),                                                                                       //                         .burstcount
		.uav_read               (render_dma_descriptor_slave_agent_m0_read),                                                                                             //                         .read
		.uav_write              (render_dma_descriptor_slave_agent_m0_write),                                                                                            //                         .write
		.uav_waitrequest        (render_dma_descriptor_slave_agent_m0_waitrequest),                                                                                      //                         .waitrequest
		.uav_readdatavalid      (render_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                    //                         .readdatavalid
		.uav_byteenable         (render_dma_descriptor_slave_agent_m0_byteenable),                                                                                       //                         .byteenable
		.uav_readdata           (render_dma_descriptor_slave_agent_m0_readdata),                                                                                         //                         .readdata
		.uav_writedata          (render_dma_descriptor_slave_agent_m0_writedata),                                                                                        //                         .writedata
		.uav_lock               (render_dma_descriptor_slave_agent_m0_lock),                                                                                             //                         .lock
		.uav_debugaccess        (render_dma_descriptor_slave_agent_m0_debugaccess),                                                                                      //                         .debugaccess
		.av_write               (render_dma_descriptor_slave_write),                                                                                                     //      avalon_anti_slave_0.write
		.av_writedata           (render_dma_descriptor_slave_writedata),                                                                                                 //                         .writedata
		.av_byteenable          (render_dma_descriptor_slave_byteenable),                                                                                                //                         .byteenable
		.av_waitrequest         (render_dma_descriptor_slave_waitrequest),                                                                                               //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (3),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avalon_slave_edid_0_s0_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avalon_slave_edid_0_s0_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (avalon_slave_edid_0_s0_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (avalon_slave_edid_0_s0_agent_m0_read),            //                         .read
		.uav_write              (avalon_slave_edid_0_s0_agent_m0_write),           //                         .write
		.uav_waitrequest        (avalon_slave_edid_0_s0_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (avalon_slave_edid_0_s0_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (avalon_slave_edid_0_s0_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (avalon_slave_edid_0_s0_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (avalon_slave_edid_0_s0_agent_m0_writedata),       //                         .writedata
		.uav_lock               (avalon_slave_edid_0_s0_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (avalon_slave_edid_0_s0_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (avalon_slave_edid_0_s0_address),                  //      avalon_anti_slave_0.address
		.av_write               (avalon_slave_edid_0_s0_write),                    //                         .write
		.av_read                (avalon_slave_edid_0_s0_read),                     //                         .read
		.av_readdata            (avalon_slave_edid_0_s0_readdata),                 //                         .readdata
		.av_writedata           (avalon_slave_edid_0_s0_writedata),                //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                        //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (led_pio_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                //                         .write
		.av_readdata            (led_pio_s1_readdata),                             //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                            //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                      //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                              //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                           //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                          //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (button_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                             //                         .write
		.av_readdata            (button_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                         //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (86),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_QOS_L                 (87),
		.PKT_QOS_H                 (87),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysinfo_reg_0_avs_s0_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (sysinfo_reg_0_avs_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysinfo_reg_0_avs_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysinfo_reg_0_avs_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysinfo_reg_0_avs_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysinfo_reg_0_avs_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysinfo_reg_0_avs_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysinfo_reg_0_avs_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysinfo_reg_0_avs_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysinfo_reg_0_avs_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysinfo_reg_0_avs_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysinfo_reg_0_avs_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysinfo_reg_0_avs_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysinfo_reg_0_avs_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (sysinfo_reg_0_avs_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (sysinfo_reg_0_avs_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysinfo_reg_0_avs_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysinfo_reg_0_avs_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysinfo_reg_0_avs_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysinfo_reg_0_avs_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysinfo_reg_0_avs_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysinfo_reg_0_avs_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysinfo_reg_0_avs_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysinfo_reg_0_avs_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysinfo_reg_0_avs_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysinfo_reg_0_avs_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysinfo_reg_0_avs_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysinfo_reg_0_avs_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysinfo_reg_0_avs_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sysinfo_reg_0_avs_s0_agent_rf_source_data),             //        in.data
		.in_valid          (sysinfo_reg_0_avs_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (sysinfo_reg_0_avs_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysinfo_reg_0_avs_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysinfo_reg_0_avs_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysinfo_reg_0_avs_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysinfo_reg_0_avs_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysinfo_reg_0_avs_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) overlay_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (overlay_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (overlay_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (overlay_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (overlay_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (overlay_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (overlay_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (overlay_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (overlay_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (overlay_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (overlay_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (overlay_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (overlay_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (overlay_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (overlay_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (overlay_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (overlay_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (overlay_dma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (overlay_dma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (overlay_dma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (overlay_dma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (overlay_dma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (overlay_dma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (overlay_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (overlay_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (overlay_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (overlay_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (overlay_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (overlay_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (overlay_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (overlay_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (overlay_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (overlay_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (overlay_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (overlay_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (overlay_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) overlay_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (overlay_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (overlay_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (overlay_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (overlay_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (overlay_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (overlay_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (overlay_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (overlay_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (overlay_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (overlay_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) overlay_dma_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (overlay_dma_csr_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (overlay_dma_csr_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (overlay_dma_csr_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (overlay_dma_csr_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (overlay_dma_csr_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (overlay_dma_csr_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) render_dma_csr_agent (
		.clk                     (pll_0_outclk0_clk),                                  //             clk.clk
		.reset                   (render_dma_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (render_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (render_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (render_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (render_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (render_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (render_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (render_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (render_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (render_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (render_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (render_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (render_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (render_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (render_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (render_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (render_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (render_dma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (render_dma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (render_dma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (render_dma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (render_dma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (render_dma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (render_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (render_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (render_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (render_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (render_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (render_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (render_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (render_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (render_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (render_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (render_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (render_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (render_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) render_dma_csr_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (render_dma_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (render_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (render_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (render_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (render_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (render_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (render_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (render_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (render_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (render_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (render_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) render_dma_csr_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (render_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (render_dma_csr_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (render_dma_csr_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (render_dma_csr_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (render_dma_csr_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (render_dma_csr_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (render_dma_csr_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (227),
		.PKT_ORI_BURST_SIZE_L      (225),
		.PKT_RESPONSE_STATUS_H     (224),
		.PKT_RESPONSE_STATUS_L     (223),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_TRANS_LOCK            (169),
		.PKT_BEGIN_BURST           (194),
		.PKT_PROTECTION_H          (218),
		.PKT_PROTECTION_L          (216),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_POSTED          (166),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (199),
		.PKT_SRC_ID_L              (196),
		.PKT_DEST_ID_H             (203),
		.PKT_DEST_ID_L             (200),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (228),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) overlay_dma_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (overlay_dma_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (overlay_dma_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (overlay_dma_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (overlay_dma_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (overlay_dma_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (overlay_dma_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (overlay_dma_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (overlay_dma_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (overlay_dma_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (overlay_dma_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (overlay_dma_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (overlay_dma_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (overlay_dma_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (overlay_dma_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (overlay_dma_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (overlay_dma_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (overlay_dma_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (overlay_dma_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (overlay_dma_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (overlay_dma_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (overlay_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (overlay_dma_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (overlay_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (overlay_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (overlay_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (overlay_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (overlay_dma_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (overlay_dma_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (overlay_dma_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (overlay_dma_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (overlay_dma_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (overlay_dma_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (overlay_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (overlay_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (overlay_dma_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (229),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) overlay_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (overlay_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (overlay_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (overlay_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (overlay_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (overlay_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (overlay_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (overlay_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (overlay_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (overlay_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (overlay_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) overlay_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (overlay_dma_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (overlay_dma_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (overlay_dma_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (overlay_dma_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (overlay_dma_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (overlay_dma_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (227),
		.PKT_ORI_BURST_SIZE_L      (225),
		.PKT_RESPONSE_STATUS_H     (224),
		.PKT_RESPONSE_STATUS_L     (223),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_TRANS_LOCK            (169),
		.PKT_BEGIN_BURST           (194),
		.PKT_PROTECTION_H          (218),
		.PKT_PROTECTION_L          (216),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_POSTED          (166),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (199),
		.PKT_SRC_ID_L              (196),
		.PKT_DEST_ID_H             (203),
		.PKT_DEST_ID_L             (200),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (228),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) render_dma_descriptor_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                               //             clk.clk
		.reset                   (render_dma_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (render_dma_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (render_dma_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (render_dma_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (render_dma_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (render_dma_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (render_dma_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (render_dma_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (render_dma_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (render_dma_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (render_dma_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (render_dma_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (render_dma_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (render_dma_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (render_dma_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (render_dma_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (render_dma_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (render_dma_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (render_dma_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (render_dma_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (render_dma_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (render_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (render_dma_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (render_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (render_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (render_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (render_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (render_dma_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (render_dma_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (render_dma_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (render_dma_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (render_dma_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (render_dma_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (render_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (render_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (render_dma_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (229),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) render_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                            //       clk.clk
		.reset             (render_dma_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (render_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (render_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (render_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (render_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (render_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (render_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (render_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (render_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (render_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (render_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) render_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                      //       clk.clk
		.reset             (render_dma_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (render_dma_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (render_dma_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (render_dma_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (render_dma_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (render_dma_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (render_dma_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (34),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (45),
		.PKT_BYTE_CNT_H            (44),
		.PKT_BYTE_CNT_L            (36),
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_POSTED          (31),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avalon_slave_edid_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (avalon_slave_edid_0_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (avalon_slave_edid_0_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (avalon_slave_edid_0_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (avalon_slave_edid_0_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (avalon_slave_edid_0_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (avalon_slave_edid_0_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (avalon_slave_edid_0_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (avalon_slave_edid_0_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (avalon_slave_edid_0_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (avalon_slave_edid_0_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (avalon_slave_edid_0_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (avalon_slave_edid_0_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (avalon_slave_edid_0_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (avalon_slave_edid_0_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (avalon_slave_edid_0_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (avalon_slave_edid_0_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (avalon_slave_edid_0_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (avalon_slave_edid_0_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (avalon_slave_edid_0_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (avalon_slave_edid_0_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (avalon_slave_edid_0_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (avalon_slave_edid_0_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (avalon_slave_edid_0_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (avalon_slave_edid_0_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (avalon_slave_edid_0_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (avalon_slave_edid_0_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (avalon_slave_edid_0_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (avalon_slave_edid_0_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (avalon_slave_edid_0_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (avalon_slave_edid_0_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (avalon_slave_edid_0_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (avalon_slave_edid_0_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (avalon_slave_edid_0_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avalon_slave_edid_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (avalon_slave_edid_0_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avalon_slave_edid_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (avalon_slave_edid_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avalon_slave_edid_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avalon_slave_edid_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avalon_slave_edid_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avalon_slave_edid_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avalon_slave_edid_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avalon_slave_edid_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avalon_slave_edid_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avalon_slave_edid_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avalon_slave_edid_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avalon_slave_edid_0_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (avalon_slave_edid_0_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (avalon_slave_edid_0_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (avalon_slave_edid_0_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (avalon_slave_edid_0_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (avalon_slave_edid_0_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (avalon_slave_edid_0_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (led_pio_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (led_pio_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (led_pio_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (led_pio_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (led_pio_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (led_pio_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),               //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (led_pio_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (led_pio_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (led_pio_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (led_pio_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (led_pio_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dipsw_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dipsw_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dipsw_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dipsw_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dipsw_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),               //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (dipsw_pio_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (dipsw_pio_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (dipsw_pio_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (dipsw_pio_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (dipsw_pio_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (button_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (button_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (button_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (button_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (button_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (button_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (button_pio_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (button_pio_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (button_pio_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (button_pio_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (button_pio_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	soc_system_mm_interconnect_2_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	soc_system_mm_interconnect_2_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (sysinfo_reg_0_avs_s0_agent_rp_ready),             //      sink.ready
		.sink_valid         (sysinfo_reg_0_avs_s0_agent_rp_valid),             //          .valid
		.sink_data          (sysinfo_reg_0_avs_s0_agent_rp_data),              //          .data
		.sink_startofpacket (sysinfo_reg_0_avs_s0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sysinfo_reg_0_avs_s0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_004 (
		.sink_ready         (overlay_dma_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (overlay_dma_csr_agent_rp_valid),                  //          .valid
		.sink_data          (overlay_dma_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (overlay_dma_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (overlay_dma_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_005 (
		.sink_ready         (render_dma_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (render_dma_csr_agent_rp_valid),                  //          .valid
		.sink_data          (render_dma_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (render_dma_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (render_dma_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (render_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_006 router_006 (
		.sink_ready         (overlay_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (overlay_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (overlay_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (overlay_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (overlay_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_006 router_007 (
		.sink_ready         (render_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (render_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (render_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (render_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (render_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                  //       clk.clk
		.reset              (render_dma_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_008 router_008 (
		.sink_ready         (avalon_slave_edid_0_s0_agent_rp_ready),           //      sink.ready
		.sink_valid         (avalon_slave_edid_0_s0_agent_rp_valid),           //          .valid
		.sink_data          (avalon_slave_edid_0_s0_agent_rp_data),            //          .data
		.sink_startofpacket (avalon_slave_edid_0_s0_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (avalon_slave_edid_0_s0_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                            //       src.ready
		.src_valid          (router_008_src_valid),                            //          .valid
		.src_data           (router_008_src_data),                             //          .data
		.src_channel        (router_008_src_channel),                          //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_009 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                       //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                            //       src.ready
		.src_valid          (router_009_src_valid),                            //          .valid
		.src_data           (router_009_src_data),                             //          .data
		.src_channel        (router_009_src_channel),                          //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_010 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                     //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                            //       src.ready
		.src_valid          (router_010_src_valid),                            //          .valid
		.src_data           (router_010_src_data),                             //          .data
		.src_channel        (router_010_src_channel),                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_011 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                            //       src.ready
		.src_valid          (router_011_src_valid),                            //          .valid
		.src_data           (router_011_src_data),                             //          .data
		.src_channel        (router_011_src_channel),                          //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (10),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (92),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (88),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (10),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysinfo_reg_0_avs_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                        //          .ready
		.source0_valid         (sysinfo_reg_0_avs_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysinfo_reg_0_avs_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysinfo_reg_0_avs_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysinfo_reg_0_avs_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysinfo_reg_0_avs_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysinfo_reg_0_avs_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                        //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) overlay_dma_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                               //          .ready
		.source0_valid         (overlay_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (overlay_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (overlay_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (overlay_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (overlay_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (overlay_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) render_dma_csr_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                  //       cr0.clk
		.reset                 (render_dma_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                               //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                              //          .ready
		.source0_valid         (render_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (render_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (render_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (render_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (render_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (render_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (194),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_BURST_TYPE_H          (191),
		.PKT_BURST_TYPE_L          (190),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (228),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (175),
		.OUT_BURSTWRAP_H           (186),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) overlay_dma_descriptor_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (overlay_dma_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (overlay_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (overlay_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (overlay_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (overlay_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (overlay_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (overlay_dma_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (overlay_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (overlay_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (overlay_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (overlay_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (overlay_dma_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (194),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_BURST_TYPE_H          (191),
		.PKT_BURST_TYPE_L          (190),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (228),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (175),
		.OUT_BURSTWRAP_H           (186),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) render_dma_descriptor_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                               //       cr0.clk
		.reset                 (render_dma_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (render_dma_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (render_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (render_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (render_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (render_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (render_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (render_dma_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (render_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (render_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (render_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (render_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (render_dma_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (59),
		.PKT_BYTE_CNT_H            (44),
		.PKT_BYTE_CNT_L            (36),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_BURST_TYPE_H          (56),
		.PKT_BURST_TYPE_L          (55),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (45),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (36),
		.OUT_BURSTWRAP_H           (51),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) avalon_slave_edid_0_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (avalon_slave_edid_0_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (avalon_slave_edid_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (avalon_slave_edid_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (avalon_slave_edid_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (avalon_slave_edid_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (avalon_slave_edid_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (avalon_slave_edid_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avalon_slave_edid_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avalon_slave_edid_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avalon_slave_edid_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avalon_slave_edid_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avalon_slave_edid_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                            //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                           //          .ready
		.source0_valid         (led_pio_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (led_pio_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (led_pio_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (led_pio_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (led_pio_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (led_pio_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dipsw_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                             //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                            //          .ready
		.source0_valid         (dipsw_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dipsw_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (dipsw_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dipsw_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dipsw_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dipsw_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                              //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                             //          .ready
		.source0_valid         (button_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (button_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (button_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (button_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (button_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (button_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                                //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                                //           .valid
		.src7_data          (cmd_demux_src7_data),                                                 //           .data
		.src7_channel       (cmd_demux_src7_channel),                                              //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                                //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                                //           .valid
		.src8_data          (cmd_demux_src8_data),                                                 //           .data
		.src8_channel       (cmd_demux_src8_channel),                                              //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                                          //           .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                                                //       src9.ready
		.src9_valid         (cmd_demux_src9_valid),                                                //           .valid
		.src9_data          (cmd_demux_src9_data),                                                 //           .data
		.src9_channel       (cmd_demux_src9_channel),                                              //           .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                                        //           .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                                           //           .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data          (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data          (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket),                                      //           .endofpacket
		.src9_ready         (cmd_demux_001_src9_ready),                                            //       src9.ready
		.src9_valid         (cmd_demux_001_src9_valid),                                            //           .valid
		.src9_data          (cmd_demux_001_src9_data),                                             //           .data
		.src9_channel       (cmd_demux_001_src9_channel),                                          //           .channel
		.src9_startofpacket (cmd_demux_001_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket   (cmd_demux_001_src9_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                           //          .valid
		.src_data            (cmd_mux_001_src_data),                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                          //          .channel
		.sink0_data          (cmd_demux_src1_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                           //          .valid
		.src_data            (cmd_mux_002_src_data),                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                          //          .channel
		.sink0_data          (cmd_demux_src2_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (render_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (crosser_out_ready),                              //     sink0.ready
		.sink0_valid         (crosser_out_valid),                              //          .valid
		.sink0_channel       (crosser_out_channel),                            //          .channel
		.sink0_data          (crosser_out_data),                               //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                        //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                          //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                          //          .valid
		.sink1_channel       (crosser_002_out_channel),                        //          .channel
		.sink1_data          (crosser_002_out_data),                           //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                           //          .valid
		.src_data            (cmd_mux_004_src_data),                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (render_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                          //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                          //          .valid
		.sink0_channel       (crosser_001_out_channel),                        //          .channel
		.sink0_data          (crosser_001_out_data),                           //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                    //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                          //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                          //          .valid
		.sink1_channel       (crosser_003_out_channel),                        //          .channel
		.sink1_data          (crosser_003_out_data),                           //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                           //          .valid
		.src_data            (cmd_mux_006_src_data),                            //          .data
		.src_channel         (cmd_mux_006_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                          //          .channel
		.sink0_data          (cmd_demux_src6_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                           //          .valid
		.src_data            (cmd_mux_007_src_data),                            //          .data
		.src_channel         (cmd_mux_007_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                          //          .channel
		.sink0_data          (cmd_demux_src7_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                           //          .valid
		.src_data            (cmd_mux_008_src_data),                            //          .data
		.src_channel         (cmd_mux_008_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                          //          .channel
		.sink0_data          (cmd_demux_src8_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                           //          .valid
		.src_data            (cmd_mux_009_src_data),                            //          .data
		.src_channel         (cmd_mux_009_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                          //          .channel
		.sink0_data          (cmd_demux_src9_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                            //      sink.ready
		.sink_channel       (router_002_src_channel),                          //          .channel
		.sink_data          (router_002_src_data),                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_src0_data),                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_src1_data),                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                            //      sink.ready
		.sink_channel       (router_003_src_channel),                          //          .channel
		.sink_data          (router_003_src_data),                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_001_src1_data),                         //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                            //      sink.ready
		.sink_channel       (router_004_src_channel),                          //          .channel
		.sink_data          (router_004_src_data),                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_002_src1_data),                         //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux_003 rsp_demux_003 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (render_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (overlay_dma_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (overlay_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (overlay_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (overlay_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (overlay_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (overlay_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux_003 rsp_demux_005 (
		.clk                (pll_0_outclk0_clk),                                               //       clk.clk
		.reset              (render_dma_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (render_dma_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (render_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (render_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (render_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (render_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (render_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.sink_ready         (avalon_slave_edid_0_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (avalon_slave_edid_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (avalon_slave_edid_0_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (avalon_slave_edid_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (avalon_slave_edid_0_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (avalon_slave_edid_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                            //      sink.ready
		.sink_channel       (router_009_src_channel),                          //          .channel
		.sink_data          (router_009_src_data),                             //          .data
		.sink_startofpacket (router_009_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_009_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_007_src0_data),                         //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_007_src1_data),                         //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                            //      sink.ready
		.sink_channel       (router_010_src_channel),                          //          .channel
		.sink_data          (router_010_src_data),                             //          .data
		.sink_startofpacket (router_010_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_010_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_008_src0_data),                         //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_008_src1_data),                         //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                            //      sink.ready
		.sink_channel       (router_011_src_channel),                          //          .channel
		.sink_data          (router_011_src_data),                             //          .data
		.sink_startofpacket (router_011_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_011_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_009_src0_data),                         //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_009_src1_data),                         //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (crosser_004_out_ready),                                               //     sink3.ready
		.sink3_valid         (crosser_004_out_valid),                                               //          .valid
		.sink3_channel       (crosser_004_out_channel),                                             //          .channel
		.sink3_data          (crosser_004_out_data),                                                //          .data
		.sink3_startofpacket (crosser_004_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (crosser_004_out_endofpacket),                                         //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready         (crosser_006_out_ready),                                               //     sink5.ready
		.sink5_valid         (crosser_006_out_valid),                                               //          .valid
		.sink5_channel       (crosser_006_out_channel),                                             //          .channel
		.sink5_data          (crosser_006_out_data),                                                //          .data
		.sink5_startofpacket (crosser_006_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket   (crosser_006_out_endofpacket),                                         //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                          //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                      //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                          //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                                          //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),                                      //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                                            //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                                            //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                                          //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                                             //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (crosser_005_out_ready),                                               //     sink3.ready
		.sink3_valid         (crosser_005_out_valid),                                               //          .valid
		.sink3_channel       (crosser_005_out_channel),                                             //          .channel
		.sink3_data          (crosser_005_out_data),                                                //          .data
		.sink3_startofpacket (crosser_005_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (crosser_005_out_endofpacket),                                         //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready         (crosser_007_out_ready),                                               //     sink5.ready
		.sink5_valid         (crosser_007_out_valid),                                               //          .valid
		.sink5_channel       (crosser_007_out_channel),                                             //          .channel
		.sink5_data          (crosser_007_out_data),                                                //          .data
		.sink5_startofpacket (crosser_007_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket   (crosser_007_out_endofpacket),                                         //          .endofpacket
		.sink6_ready         (rsp_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_006_src1_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_006_src1_channel),                                          //          .channel
		.sink6_data          (rsp_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready         (rsp_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid         (rsp_demux_007_src1_valid),                                            //          .valid
		.sink7_channel       (rsp_demux_007_src1_channel),                                          //          .channel
		.sink7_data          (rsp_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready         (rsp_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid         (rsp_demux_008_src1_valid),                                            //          .valid
		.sink8_channel       (rsp_demux_008_src1_channel),                                          //          .channel
		.sink8_data          (rsp_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready         (rsp_demux_009_src1_ready),                                            //     sink9.ready
		.sink9_valid         (rsp_demux_009_src1_valid),                                            //          .valid
		.sink9_channel       (rsp_demux_009_src1_channel),                                          //          .channel
		.sink9_data          (rsp_demux_009_src1_data),                                             //          .data
		.sink9_startofpacket (rsp_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src1_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (164),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (179),
		.IN_PKT_BYTE_CNT_L             (171),
		.IN_PKT_TRANS_COMPRESSED_READ  (165),
		.IN_PKT_TRANS_WRITE            (167),
		.IN_PKT_BURSTWRAP_H            (186),
		.IN_PKT_BURSTWRAP_L            (180),
		.IN_PKT_BURST_SIZE_H           (189),
		.IN_PKT_BURST_SIZE_L           (187),
		.IN_PKT_RESPONSE_STATUS_H      (224),
		.IN_PKT_RESPONSE_STATUS_L      (223),
		.IN_PKT_TRANS_EXCLUSIVE        (170),
		.IN_PKT_BURST_TYPE_H           (191),
		.IN_PKT_BURST_TYPE_L           (190),
		.IN_PKT_ORI_BURST_SIZE_L       (225),
		.IN_PKT_ORI_BURST_SIZE_H       (227),
		.IN_ST_DATA_W                  (228),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) overlay_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_006_src_valid),                                             //      sink.valid
		.in_channel           (router_006_src_channel),                                           //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_006_src_ready),                                             //          .ready
		.in_data              (router_006_src_data),                                              //          .data
		.out_endofpacket      (overlay_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (overlay_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (overlay_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (overlay_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (overlay_dma_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (overlay_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (164),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (179),
		.IN_PKT_BYTE_CNT_L             (171),
		.IN_PKT_TRANS_COMPRESSED_READ  (165),
		.IN_PKT_TRANS_WRITE            (167),
		.IN_PKT_BURSTWRAP_H            (186),
		.IN_PKT_BURSTWRAP_L            (180),
		.IN_PKT_BURST_SIZE_H           (189),
		.IN_PKT_BURST_SIZE_L           (187),
		.IN_PKT_RESPONSE_STATUS_H      (224),
		.IN_PKT_RESPONSE_STATUS_L      (223),
		.IN_PKT_TRANS_EXCLUSIVE        (170),
		.IN_PKT_BURST_TYPE_H           (191),
		.IN_PKT_BURST_TYPE_L           (190),
		.IN_PKT_ORI_BURST_SIZE_L       (225),
		.IN_PKT_ORI_BURST_SIZE_H       (227),
		.IN_ST_DATA_W                  (228),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) render_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                               //       clk.clk
		.reset                (render_dma_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_007_src_valid),                                            //      sink.valid
		.in_channel           (router_007_src_channel),                                          //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                      //          .endofpacket
		.in_ready             (router_007_src_ready),                                            //          .ready
		.in_data              (router_007_src_data),                                             //          .data
		.out_endofpacket      (render_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (render_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (render_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (render_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (render_dma_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (render_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (29),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (44),
		.IN_PKT_BYTE_CNT_L             (36),
		.IN_PKT_TRANS_COMPRESSED_READ  (30),
		.IN_PKT_TRANS_WRITE            (32),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (45),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (35),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (93),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (116),
		.OUT_PKT_RESPONSE_STATUS_L     (115),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (117),
		.OUT_PKT_ORI_BURST_SIZE_H      (119),
		.OUT_ST_DATA_W                 (120),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) avalon_slave_edid_0_s0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (router_008_src_valid),                                       //      sink.valid
		.in_channel           (router_008_src_channel),                                     //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_008_src_ready),                                       //          .ready
		.in_data              (router_008_src_data),                                        //          .data
		.out_endofpacket      (avalon_slave_edid_0_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avalon_slave_edid_0_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (avalon_slave_edid_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (avalon_slave_edid_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (avalon_slave_edid_0_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avalon_slave_edid_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (164),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (179),
		.OUT_PKT_BYTE_CNT_L            (171),
		.OUT_PKT_TRANS_COMPRESSED_READ (165),
		.OUT_PKT_BURST_SIZE_H          (189),
		.OUT_PKT_BURST_SIZE_L          (187),
		.OUT_PKT_RESPONSE_STATUS_H     (224),
		.OUT_PKT_RESPONSE_STATUS_L     (223),
		.OUT_PKT_TRANS_EXCLUSIVE       (170),
		.OUT_PKT_BURST_TYPE_H          (191),
		.OUT_PKT_BURST_TYPE_L          (190),
		.OUT_PKT_ORI_BURST_SIZE_L      (225),
		.OUT_PKT_ORI_BURST_SIZE_H      (227),
		.OUT_ST_DATA_W                 (228),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) overlay_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                            //          .ready
		.in_data              (cmd_mux_004_src_data),                                             //          .data
		.out_endofpacket      (overlay_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (overlay_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (overlay_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (overlay_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (overlay_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (overlay_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (164),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (179),
		.OUT_PKT_BYTE_CNT_L            (171),
		.OUT_PKT_TRANS_COMPRESSED_READ (165),
		.OUT_PKT_BURST_SIZE_H          (189),
		.OUT_PKT_BURST_SIZE_L          (187),
		.OUT_PKT_RESPONSE_STATUS_H     (224),
		.OUT_PKT_RESPONSE_STATUS_L     (223),
		.OUT_PKT_TRANS_EXCLUSIVE       (170),
		.OUT_PKT_BURST_TYPE_H          (191),
		.OUT_PKT_BURST_TYPE_L          (190),
		.OUT_PKT_ORI_BURST_SIZE_L      (225),
		.OUT_PKT_ORI_BURST_SIZE_H      (227),
		.OUT_ST_DATA_W                 (228),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) render_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                               //       clk.clk
		.reset                (render_dma_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                           //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                                         //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                           //          .ready
		.in_data              (cmd_mux_005_src_data),                                            //          .data
		.out_endofpacket      (render_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (render_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (render_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (render_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (render_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (render_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (116),
		.IN_PKT_RESPONSE_STATUS_L      (115),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (117),
		.IN_PKT_ORI_BURST_SIZE_H       (119),
		.IN_ST_DATA_W                  (120),
		.OUT_PKT_ADDR_H                (29),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (44),
		.OUT_PKT_BYTE_CNT_L            (36),
		.OUT_PKT_TRANS_COMPRESSED_READ (30),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (35),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (93),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) avalon_slave_edid_0_s0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                                      //          .ready
		.in_data              (cmd_mux_006_src_data),                                       //          .data
		.out_endofpacket      (avalon_slave_edid_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avalon_slave_edid_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (avalon_slave_edid_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (avalon_slave_edid_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (avalon_slave_edid_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avalon_slave_edid_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (render_dma_reset_n_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                              //              .channel
		.in_data           (cmd_demux_src3_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (render_dma_reset_n_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                              //              .channel
		.in_data           (cmd_demux_src5_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (render_dma_reset_n_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src3_data),                                             //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                   //       out_clk.clk
		.out_reset         (render_dma_reset_n_reset_bridge_in_reset_reset),                      // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src5_data),                                             //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_0_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (render_dma_reset_n_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src0_data),                                             //              .data
		.out_ready         (crosser_004_out_ready),                                               //           out.ready
		.out_valid         (crosser_004_out_valid),                                               //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                             //              .channel
		.out_data          (crosser_004_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_0_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (render_dma_reset_n_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src1_data),                                             //              .data
		.out_ready         (crosser_005_out_ready),                                               //           out.ready
		.out_valid         (crosser_005_out_valid),                                               //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                             //              .channel
		.out_data          (crosser_005_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (pll_0_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (render_dma_reset_n_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_005_src0_data),                                             //              .data
		.out_ready         (crosser_006_out_ready),                                               //           out.ready
		.out_valid         (crosser_006_out_valid),                                               //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                             //              .channel
		.out_data          (crosser_006_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (pll_0_outclk0_clk),                                                   //        in_clk.clk
		.in_reset          (render_dma_reset_n_reset_bridge_in_reset_reset),                      //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_005_src1_data),                                             //              .data
		.out_ready         (crosser_007_out_ready),                                               //           out.ready
		.out_valid         (crosser_007_out_valid),                                               //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                             //              .channel
		.out_data          (crosser_007_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysinfo_reg_0_avs_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (overlay_dma_csr_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (overlay_dma_csr_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (overlay_dma_csr_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (render_dma_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (render_dma_csr_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (render_dma_csr_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (render_dma_csr_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter_004 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (overlay_dma_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (overlay_dma_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (overlay_dma_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter_004 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (render_dma_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (render_dma_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (render_dma_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (render_dma_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                       //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter_006 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (avalon_slave_edid_0_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (avalon_slave_edid_0_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (avalon_slave_edid_0_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (sysinfo_reg_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                //         .error
	);

endmodule
